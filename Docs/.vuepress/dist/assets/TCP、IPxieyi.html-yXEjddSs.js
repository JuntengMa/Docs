import{_ as e,o as t,c as a,a as o,e as p}from"./app-iph3vjA0.js";const r={},i=p('<h3 id="_1、什么是-tcp、ip" tabindex="-1"><a class="header-anchor" href="#_1、什么是-tcp、ip" aria-hidden="true">#</a> 1、什么是 TCP、IP</h3><blockquote><p>TCP/IP 是互联网相关的各类协议的总称</p></blockquote><h3 id="_2、tcp-ip-分层" tabindex="-1"><a class="header-anchor" href="#_2、tcp-ip-分层" aria-hidden="true">#</a> 2、TCP/IP 分层</h3><blockquote><p>应用层、传输层、网络层、数据链路层 ；</p></blockquote><h3 id="_3、tcp-ip-分层的好处" tabindex="-1"><a class="header-anchor" href="#_3、tcp-ip-分层的好处" aria-hidden="true">#</a> 3、TCP/IP 分层的好处</h3><blockquote><p>1、模块化，便于修改维护</p><p>2、各层只需要协调好接口部分之外，每个层次内部设计可以自由改动</p></blockquote><h3 id="_4、应用层作用" tabindex="-1"><a class="header-anchor" href="#_4、应用层作用" aria-hidden="true">#</a> 4、应用层作用</h3><blockquote><p>应用层决定了<strong>向用户提供应用服务</strong>时通信的活动</p><p>TCP/IP 协议族内预存了各类通用的应用服务。比如：</p><p><strong>FTP</strong>（FileTransfer Protocol，文件传输协议）</p><p><strong>DNS</strong>（Domain Name System，域名系统）服务就是其中两类。</p><p><strong>HTTP 协议</strong></p></blockquote><h3 id="_5、传输层作用" tabindex="-1"><a class="header-anchor" href="#_5、传输层作用" aria-hidden="true">#</a> 5、传输层作用</h3><blockquote><p>传输层对上层应用层 ， 提供处于网络连接中的两台计算机之间的数据传输</p><p>在传输层有两个性质不同的协议：</p><ul><li><p><strong>TCP</strong>（Transmission ControlProtocol，传输控制协议）</p><p><strong>TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。</strong></p></li><li><p>UDP（User Data Protocol，用户数据报协议）。</p></li></ul></blockquote><h3 id="_6、网络层-又名网络互连层-作用" tabindex="-1"><a class="header-anchor" href="#_6、网络层-又名网络互连层-作用" aria-hidden="true">#</a> 6、网络层（又名网络互连层）作用</h3><blockquote><p>网络层用来处理在网络上流动的数据包（两台 pc 之间数据传输）。</p><p>数据包是网络传输的最小数据单位。</p><p>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><p>IP（Internet Protocol）网际协议位于网络层</p></blockquote><h3 id="_7、链路层-又名数据链路层-网络接口层" tabindex="-1"><a class="header-anchor" href="#_7、链路层-又名数据链路层-网络接口层" aria-hidden="true">#</a> 7、链路层（又名数据链路层，网络接口层）</h3><blockquote><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p></blockquote><h3 id="_8、tcp-ip-通信传输流" tabindex="-1"><a class="header-anchor" href="#_8、tcp-ip-通信传输流" aria-hidden="true">#</a> 8、TCP/IP 通信传输流</h3><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212210823593.png" alt="image-20220212210823593"></p><h3 id="_9、tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#_9、tcp-三次握手" aria-hidden="true">#</a> 9、TCP 三次握手</h3><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212211759313.png" alt="image-20220212211759313"></p><blockquote><p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。</p><p>握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize）和 ACK（acknowledgement）。</p><p>1、发送端首先发送一个带 SYN 标志的数据包给对方。</p><p>2、接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。</p><p>3、最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</p><p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p></blockquote><h3 id="_10、dns" tabindex="-1"><a class="header-anchor" href="#_10、dns" aria-hidden="true">#</a> 10、DNS</h3><blockquote><p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。</p><p>它提供<strong>域名到 IP 地址之间的解析</strong>服务。</p><p>计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。</p><p>比如www.hackr.jp。用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。</p><p>DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p></blockquote><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212212229926.png" alt="image-20220212212229926"></p><p>10、各协议与 Http 的关系</p><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212212414496.png" alt="image-20220212212414496"></p><p>11、URI 、URL 区别</p><ul><li><p>URI</p><blockquote><p>URI 是 Uniform Resource Identifier 的缩写。RFC2396 分别对这 3 个单词进行了如下定义。</p><ul><li><p>Uniform 规定<strong>统一的格式可方便处理多种不同类型的资源</strong>，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案（如 http: 或 ftp:）也更容易。</p></li><li><p>Resource 资源的定义是“<strong>可标识的任何东西</strong>”。除了文档文件、图像或服务（例如当天的天气预报）等能够区别于其他类型的，全都可作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。</p></li><li><p>Identifier 表示<strong>可标识的对象</strong>。也称为标识符。</p></li></ul></blockquote><blockquote><p>综上所述，URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。如采用 HTTP 协议时，协议方案就是 http</p></blockquote></li><li><p>URL</p><blockquote><p>URL 表示资源的地点（互联网上所处的位置），可见 URL 是 URI 的子集。</p></blockquote></li></ul>',26);function n(c,s){return t(),a("div",null,[o(" @format "),i])}const l=e(r,[["render",n],["__file","TCP、IPxieyi.html.vue"]]);export{l as default};
