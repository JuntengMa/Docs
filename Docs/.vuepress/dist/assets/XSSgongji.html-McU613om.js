import{_ as i,r as t,o as s,c as a,b as e,d as l,f as r,e as c}from"./app-1sZ14lpL.js";const n={},d=c('<h2 id="xss攻击" tabindex="-1"><a class="header-anchor" href="#xss攻击" aria-hidden="true">#</a> XSS攻击</h2><h4 id="_1、什么是xss攻击" tabindex="-1"><a class="header-anchor" href="#_1、什么是xss攻击" aria-hidden="true">#</a> 1、什么是xss攻击</h4><ul><li>xss攻击即<code>跨站脚本攻击</code>, 是一种恶意代码注入攻击 , 通过恶意脚本对客户端网页进行篡改，达到窃取信息等目的，本质是数据被当作程序执行。</li><li>xss的本质是因为网站没有对恶意代码进行过滤, 与正常代码混在一起,但是浏览器不能识别代码哪些可信哪些不可信,从而导致了恶意代码的执行.</li></ul><h4 id="_2、xss攻击分类" tabindex="-1"><a class="header-anchor" href="#_2、xss攻击分类" aria-hidden="true">#</a> 2、XSS攻击分类</h4><ul><li><p>存储型</p><blockquote><p>存储型XSS攻击是将恶意代码提交到网站服务器中,当用户请求数据的时候,服务器将恶意代码拼接到HTML里面后返回,导致恶意代码的执行</p></blockquote></li><li><p>反射型</p><blockquote><p>反射型指的是某些通过url参数获取数据的网站,攻击者构建特殊的url,当服务器收到请求之后,从url中获取数据,并将其拼接为html后返回,从而导致了恶意代码的执行</p><p>👇</p><p>这种攻击方式通常需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。该方式只会经过服务器，不会经过数据库。</p></blockquote></li><li><p>DOM型</p><blockquote><p>DOM型XSS攻击指的是攻击者构建了特殊的URL,当用户打开了网站之后,js脚本从url中获取数据,从而导致了恶意代码的执行</p></blockquote></li></ul><h4 id="_3、xss-危害" tabindex="-1"><a class="header-anchor" href="#_3、xss-危害" aria-hidden="true">#</a> 3、XSS 危害</h4><ul><li>通过 document.cookie 盗取 cookie</li><li>使用 js 或 css 破坏页面正常的结构与样式</li><li>流量劫持（通过访问某段具有 window.location.href 定位到其他页面:<code>&lt;script&gt;window.location.href=&quot;www.baidu.com&quot;;&lt;/script&gt;</code>）</li><li>Dos 攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应</li><li>利用 iframe、frame、XMLHttpRequest 或上述 Flash 等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作</li><li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动</li><li>偷取网站任意数据、用户资料等等</li></ul><h4 id="_3-如何预防xss攻击" tabindex="-1"><a class="header-anchor" href="#_3-如何预防xss攻击" aria-hidden="true">#</a> 3.如何预防XSS攻击</h4><p>​ 预防XSS攻击主要有两个方案</p><ul><li><p>恶意代码提交的时候(不可靠)</p><blockquote><p>当数据即将存入数据库的时候进行转义,但是数据库的数据可能在多个地方使用,有些地方不需要转义,由于我们无法判断这些数据最后的使用场景,所以该方法是<strong>不可靠的</strong></p></blockquote></li><li><p>浏览器执行之前</p><blockquote><ul><li>使用纯前端的方式,不用服务器拼接HTML返回</li><li><strong>对需要插入的HTML进行充分的转义</strong></li><li><strong>输入输出检查</strong></li></ul></blockquote></li><li><p>对于DOM性XSS攻击还有以下几种方式</p><blockquote><ul><li>CSP,CSP本质是创建一个白名单,告诉浏览器哪些外部资源是可以加载和执行,从而防止恶意代码的注入攻击</li><li><strong>对敏感信息进行保护,比如cookie使用http-only,禁止脚本获取cookie</strong></li><li>使用**验证码,**防止脚本伪装用户进行操作</li></ul></blockquote></li></ul><h4 id="_4-什么是csp" tabindex="-1"><a class="header-anchor" href="#_4-什么是csp" aria-hidden="true">#</a> 4.什么是CSP</h4><p>​ CSP指的是内容安全侧策略</p><p>​ 他的本质是建立一个白名单,告诉浏览器哪些外部资源可以加在和执行.</p><p>​ <strong>开启SCP方式:</strong></p><ul><li>一种是设置 HTTP 首部中的 <code>Content-Security-Policy</code></li><li>一种是设置 meta 标签的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code></li></ul>',15),u={href:"https://juejin.im/post/5bad9140e51d450e935c6d64",target:"_blank",rel:"noopener noreferrer"};function h(p,S){const o=t("ExternalLinkIcon");return s(),a("div",null,[d,e("p",null,[l("详细资料可以参考： "),e("a",u,[l("《前端安全系列（一）：如何防止 XSS 攻击？》"),r(o)])])])}const x=i(n,[["render",h],["__file","XSSgongji.html.vue"]]);export{x as default};
