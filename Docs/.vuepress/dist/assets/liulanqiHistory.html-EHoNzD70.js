import{_ as a,o as n,c as s,a as t,e}from"./app-iph3vjA0.js";const o={},p=e(`<h3 id="浏览器-history" tabindex="-1"><a class="header-anchor" href="#浏览器-history" aria-hidden="true">#</a> 浏览器 History</h3><p>参考资料 https://wangdoc.com/javascript/bom/history.html</p><p>https://juejin.cn/post/6948746074504986655#heading-6</p><h4 id="_1、what" tabindex="-1"><a class="header-anchor" href="#_1、what" aria-hidden="true">#</a> 1、what？</h4><blockquote><p>History 对象包含用户（在浏览器窗口中）访问过的 URL。</p><p>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</p><p><img src="https://www.runoob.com/images/lamp.gif" alt="Note"><strong>注意：</strong> 没有应用于 History 对象的公开标准，不过所有浏览器都支持该对象。</p></blockquote><h4 id="_2、属性、方法" tabindex="-1"><a class="header-anchor" href="#_2、属性、方法" aria-hidden="true">#</a> 2、属性、方法</h4><h5 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性：</h5><ul><li>length： 返回历史列表中网址数</li><li>state: History 对象的当前状态 , 通常是 undefined，即未设置</li></ul><h5 id="方法大致分为两类" tabindex="-1"><a class="header-anchor" href="#方法大致分为两类" aria-hidden="true">#</a> 方法大致分为两类：</h5><ul><li><code>back( ) 、forward( ) 、go( )</code> 这种可以定位到某个浏览历史记录上</li><li><code>pushState( ) 、replaceState（ ）</code>这种，<u>操作历史记录</u>，并立即改变当前 url，但不刷新页面</li></ul><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202211411599.png" alt="image-20220221141105523"></p><h4 id="_3、back-、-forward-、go-详解" tabindex="-1"><a class="header-anchor" href="#_3、back-、-forward-、go-详解" aria-hidden="true">#</a> 3、<code>Back 、 forward 、go </code>详解</h4><ul><li><p>back ： 回退，相当于点击浏览器 <code>&lt;—</code>按钮</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>forward ： 前进 ，相当于点击浏览区<code>—&gt;</code>按钮</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>go : 访问某一页面 , 接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址 , 默认为 0，相当于刷新当前页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// forward</span>

window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//back</span>

history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 刷新当前页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>相同点：</p><ul><li><strong>都会触发页面刷新</strong></li></ul></li></ul><h4 id="_4、pushstate-、replacestate详解" tabindex="-1"><a class="header-anchor" href="#_4、pushstate-、replacestate详解" aria-hidden="true">#</a> 4、<code>pushState 、replaceState</code>详解</h4><h5 id="_1-pushstate" tabindex="-1"><a class="header-anchor" href="#_1-pushstate" aria-hidden="true">#</a> 1. pushState</h5><blockquote><p>向浏览器历史记录<strong>添加</strong>一条记录，并立即改变当前 url</p></blockquote><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231747035.png" alt="image-20220223174708955" style="zoom:80%;float:left;"><p>🍕 如：当前浏览器地址为 :</p><p><code>https://www.google.com/search?q=%E6%B5%8F%E8%A7%88%E5%99%A8History%E5%AF%B9%E8%B1%A1&amp;rlz=1C1FKPE_zh-TWCN988CN988&amp;oq=%E6%B5%8F%E8%A7%88%E5%99%A8History%E5%AF%B9%E8%B1%A1&amp;aqs=chrome..69i57j0i512.5294j0j15&amp;sourceid=chrome&amp;ie=UTF-8</code></p><p>🍔 通过调用 pushState 往历史记录里面添加一条 history</p><p><code>https://www.google.com/search?q=123&amp;rlz=1C1FKPE_zh-TWCN988CN988&amp;oq=123&amp;aqs=chrome..69i57j69i60l3j69i65l3j69i60.3556j0j7&amp;sourceid=chrome&amp;ie=UTF-8</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>
	<span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token string">&#39;新增的搜索页&#39;</span><span class="token punctuation">,</span>
	<span class="token string">&#39;/search?q=123&amp;rlz=1C1FKPE_zh-TWCN988CN988&amp;oq=123&amp;aqs=chrome..69i57j69i60l3j69i65l3j69i60.3556j0j7&amp;sourceid=chrome&amp;ie=UTF-8&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🧇 发现：</p><h6 id="_1-1、添加完历史记录-会立刻修改当前-url-且不会重新加载页面-刷新页面" tabindex="-1"><a class="header-anchor" href="#_1-1、添加完历史记录-会立刻修改当前-url-且不会重新加载页面-刷新页面" aria-hidden="true">#</a> 1-<strong>1、添加完历史记录，会立刻修改当前 url ，且不会重新加载页面（刷新页面）</strong></h6><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231752515.gif" alt=""></p><h6 id="_1-2、历史记录-history-的-length-加一" tabindex="-1"><a class="header-anchor" href="#_1-2、历史记录-history-的-length-加一" aria-hidden="true">#</a> <strong>1-2、历史记录 history 的 length 加一</strong></h6><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231759188.png" alt="image-20220223175941149"></p><h6 id="_1-3、小结" tabindex="-1"><a class="header-anchor" href="#_1-3、小结" aria-hidden="true">#</a> 1-3、小结：</h6><ul><li><p><code>pushState()</code>方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。</p></li><li><p>如果<code>pushState()</code>方法设置了一个跨域网址，则会报错。</p><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231803288.png" alt="image-20220223180316247"></p></li></ul><h5 id="_2、replacestate" tabindex="-1"><a class="header-anchor" href="#_2、replacestate" aria-hidden="true">#</a> 2、replaceState</h5><p><code>History.replaceState()</code>方法用来修改 History 对象的当前记录，其他都与<code>pushState()</code>方法一模一样。</p><p>首先现在 history 中添加几条历史记录</p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231809440.png" alt="image-20220223180916400" style="zoom:80%;float:left;"><p>使用 replaceState 修改当前记录</p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231811510.png" alt="image-20220223181111475" style="zoom:80%;float:left;"><h6 id="_2-1、replacestate-可以修改当前历史记录-但不会在历史记录中新增数据" tabindex="-1"><a class="header-anchor" href="#_2-1、replacestate-可以修改当前历史记录-但不会在历史记录中新增数据" aria-hidden="true">#</a> 2-1、replaceState 可以修改<strong>当前</strong>历史记录 ， 但不会在历史记录中新增数据</h6><h6 id="_2-2、replacestate-一样不能跨域" tabindex="-1"><a class="header-anchor" href="#_2-2、replacestate-一样不能跨域" aria-hidden="true">#</a> 2-2、replaceState 一样不能跨域</h6><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231817275.png" alt="image-20220223181723234"></p><h4 id="_5、popstate-事件" tabindex="-1"><a class="header-anchor" href="#_5、popstate-事件" aria-hidden="true">#</a> 5、popState 事件</h4><p>每当同一个文档的浏览历史（即<code>history</code>对象）出现变化时，就会触发<code>popstate</code>事件。</p><p>🚫🚫🚫🚫 调用<code>pushState 、replaceState</code> 不会触发该事件，只有用户触发<code> back 、go、forward</code>才会触发</p><p>另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p><p>（同一路由，参数变了不会触发该事件）</p><p>回调函数的参数是一个<code>event</code>事件对象，它的<code>state</code>属性指向<code>pushState</code>和<code>replaceState</code>方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的<code>event.state</code>，就是通过<code>pushState</code>和<code>replaceState</code>方法，为当前 URL 绑定的<code>state</code>对象。</p><p>这个<code>state</code>对象也可以直接通过<code>history</code>对象读取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;location: &#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//或</span>

window<span class="token punctuation">.</span><span class="token function-variable function">onpopstate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;location: &#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231826149.png" alt="image-20220223182625105" style="zoom:80%;float:left;"><h4 id="_6、一些问题" tabindex="-1"><a class="header-anchor" href="#_6、一些问题" aria-hidden="true">#</a> 6、一些问题</h4><h6 id="_1-history-对象可变吗" tabindex="-1"><a class="header-anchor" href="#_1-history-对象可变吗" aria-hidden="true">#</a> 1.history 对象可变吗？</h6><blockquote><p>如下图，将 window.history 置空， 再次打印，history 不变 ， 故不可修改</p></blockquote><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231846489.png" alt="image-20220223184653450" style="zoom:80%;float:left;"><h6 id="_2-history-length-既然代表浏览器历史列表中的-url-数量-那么这个数量可以无限多吗" tabindex="-1"><a class="header-anchor" href="#_2-history-length-既然代表浏览器历史列表中的-url-数量-那么这个数量可以无限多吗" aria-hidden="true">#</a> 2.history.length 既然代表浏览器历史列表中的 URL 数量，那么这个数量可以无限多吗？</h6><blockquote><p>如下图，最多 50</p></blockquote><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202231854038.png" alt="image-20220223185437002" style="zoom:80%;float:left;"><h6 id="_3-location-href-与-history-pushstate-有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-location-href-与-history-pushstate-有什么区别" aria-hidden="true">#</a> 3.location.href 与 history.pushState 有什么区别？</h6><blockquote><p>1.使用 location.href 跳转后页面会发起新的文档请求，而 history.pushState 不会</p><p>2.location.href 可以跳转到其他域名，而 history 不能。</p><p>3.location.href 与 history 都会往历史列表中添加一条记录。</p></blockquote><h6 id="_4-如果我从-a-域名跳转到了-b-域名-那么-history-back-会回到哪里" tabindex="-1"><a class="header-anchor" href="#_4-如果我从-a-域名跳转到了-b-域名-那么-history-back-会回到哪里" aria-hidden="true">#</a> 4.如果我从 A 域名跳转到了 B 域名，那么 history.back()会回到哪里？</h6><blockquote><p>a</p></blockquote><h6 id="_5-popstate-事件的触发条件是什么" tabindex="-1"><a class="header-anchor" href="#_5-popstate-事件的触发条件是什么" aria-hidden="true">#</a> 5.popstate 事件的触发条件是什么？</h6><blockquote><p>1.因为 location.href 是刷新式的跳转，所以这个打印信息是肯定打印不出来的，在刷新的时候这个监听函数就已经失效了，所以这里不讨论 location.href 会不会触发 popstate 事件。跟<code>location.href</code>类似的还有 history.go(0)，因为<code>history.go(0)</code>,注意这里是<code>go(0)</code> ,也会直接刷新页面，所以这个监听函数也会失效，也<strong>不会打印出信息</strong>。</p><p>2.<code>location.hash</code>是会触发 popstate 事件的，同样会触发 popstate 的还有<code>history.back</code>，<code>history.forward</code>，<code>history.go</code>。 3.history.pushState，history.replaceState 都<strong>不会触发</strong>popstate 事件。</p></blockquote>`,60);function c(i,r){return n(),s("div",null,[t(" @format "),p])}const u=a(o,[["render",c],["__file","liulanqiHistory.html.vue"]]);export{u as default};
