import{_ as a,o as e,c as p,a as r,e as h}from"./app-iph3vjA0.js";const t={},n=h('<p>https://zhuanlan.zhihu.com/p/56663184</p><p>https://zhuanlan.zhihu.com/p/43789231</p><h5 id="_1、什么是-https" tabindex="-1"><a class="header-anchor" href="#_1、什么是-https" aria-hidden="true">#</a> 1、什么是 HTTPS</h5><blockquote><p>HTTP+ 加密 （SSL 协议）+ 认证 + 完整性保护=HTTPS</p></blockquote><h5 id="_2、流程" tabindex="-1"><a class="header-anchor" href="#_2、流程" aria-hidden="true">#</a> 2、流程</h5><p>HTTPS 通信主要包括几个节点，发起请求、验证身份、协商秘钥、加密会话，具体流程如下（此例子只有客户端对服务端的单向验证）：</p><p>1、客户端向服务端发起建立 HTTPS 请求。</p><p>2、服务器向客户端发送<strong>数字证书+数字签名</strong>。</p><p>3、客户端验证数字证书，证书验证通过后客户端生成会话密钥（双向验证则此处客户端也会向服务器发送证书）。</p><p>4、服务器生成会话密钥（双向验证此处服务端也会对客户端的证书验证）。</p><p>5、客户端与服务端开始进行加密会话。</p><h5 id="_3、原理" tabindex="-1"><a class="header-anchor" href="#_3、原理" aria-hidden="true">#</a> 3、原理</h5><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202171616473.png" alt="image-20220217161650400"></p><h5 id="_4、加密方式" tabindex="-1"><a class="header-anchor" href="#_4、加密方式" aria-hidden="true">#</a> 4、加密方式</h5><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。</p><blockquote><p>若密钥能够实现安全交换，那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处理速度要慢。</p><p>故两者组合–&gt;==在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式==</p></blockquote><p>1、使用非对称加密的方式交换 对称加密秘钥</p><p>2、使用对称加密的方式进行通信</p><h5 id="_5、整体流程" tabindex="-1"><a class="header-anchor" href="#_5、整体流程" aria-hidden="true">#</a> 5、整体流程</h5><p><img src="https://pic2.zhimg.com/80/v2-2c5ead7e9e4544335d3db4e5d1d4e355_1440w.jpg" alt=""></p><h6 id="第一步-客户端向服务端发起请求" tabindex="-1"><a class="header-anchor" href="#第一步-客户端向服务端发起请求" aria-hidden="true">#</a> <strong>第一步：客户端向服务端发起请求</strong></h6><p>（1）客户端生成随机数 R1 发送给服务端；</p><p>（2）告诉服务端自己支持哪些加密算法；</p><h6 id="第二步-服务器向客户端发送数字证书" tabindex="-1"><a class="header-anchor" href="#第二步-服务器向客户端发送数字证书" aria-hidden="true">#</a> <strong>第二步：服务器向客户端发送数字证书</strong></h6><p>（1）服务端生成随机数 R2;</p><p>（2）从客户端支持的加密算法中选择一种双方都支持的加密算法（此算法用于后面的会话密钥生成）;</p><p>（3）服务端生成把证书、随机数 R2、会话密钥生成算法，一同发给客户端;</p><h6 id="第三步-客户端验证数字证书。" tabindex="-1"><a class="header-anchor" href="#第三步-客户端验证数字证书。" aria-hidden="true">#</a> <strong>第三步：客户端验证数字证书。</strong></h6><p>（1）验证证书的可靠性，先用 CA 的公钥解密被加密过后的证书,能解密则说明证书没有问题，然后通过证书里提供的摘要算法进行对数据进行摘要，然后通过自己生成的摘要与服务端发送的摘要比对。</p><p>（2）验证证书合法性，包括证书是否吊销、是否到期、域名是否匹配，通过后则进行后面的流程</p><p>（3）获得证书的公钥、会话密钥生成算法、随机数 R2</p><p>（4）生成一个随机数 R3。</p><p>（5）根据会话秘钥算法使用 R1、R2、R3 生成会话秘钥。</p><p>（6）用服务端证书的公钥加密随机数 R3 并发送给服务端。</p><h6 id="第四步-服务器得到会话密钥" tabindex="-1"><a class="header-anchor" href="#第四步-服务器得到会话密钥" aria-hidden="true">#</a> <strong>第四步：服务器得到会话密钥</strong></h6><p>（1）服务器用私钥解密客户端发过来的随机数 R3</p><p>（2）根据会话秘钥算法使用 R1、R2、R3 生成会话秘钥</p><h6 id="第五步-客户端与服务端进行加密会话" tabindex="-1"><a class="header-anchor" href="#第五步-客户端与服务端进行加密会话" aria-hidden="true">#</a> <strong>第五步：客户端与服务端进行加密会话</strong></h6><p>（1）客户端发送加密数据给服务端</p><p>发送加密数据：客户端加密数据后发送给服务端。</p><p>（2）服务端响应客户端</p><p>解密接收数据：服务端用会话密钥解密客户端发送的数据；</p><p>加密响应数据：用会话密钥把响应的数据加密发送给客户端。</p><p>（3）客户端解密服务端响应的数据</p><p>解密数据：客户端用会话密钥解密响应数据；</p><h5 id="_6、加密的一些问题" tabindex="-1"><a class="header-anchor" href="#_6、加密的一些问题" aria-hidden="true">#</a> 6、加密的一些问题</h5>',46);function d(i,s){return e(),p("div",null,[r(" @format "),n])}const c=a(t,[["render",d],["__file","4.1、HTTPSqingqiu.html.vue"]]);export{c as default};
