import{_ as l,r as a,o as d,c as s,b as e,d as i,f as r,e as t}from"./app-1sZ14lpL.js";const c={},u=t(`<h3 id="_1、文件夹操作" tabindex="-1"><a class="header-anchor" href="#_1、文件夹操作" aria-hidden="true">#</a> 1、文件夹操作</h3><ul><li>创建文件夹</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir &quot;dirname&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>文件或目录改名、或将文件或目录移入其它位置</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mv &#39;dirname&#39; &#39;newDirname&#39;
mv &#39;filename&#39; &#39;newFilename&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o={href:"https://www.runoob.com/linux/linux-comm-cp.html",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,[e("p",null,"使用指令 cp 将当前目录 test/ 下的所有文件复制到新目录 newtest 下，输入如下命令")],-1),v=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cp –r test/ newtest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>压缩文件夹</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>zip -r fileName.zip dirName/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>解压(https://www.runoob.com/linux/linux-comm-unzip.html)</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>unzip filename.zip               //解压压缩文件到当前文件夹
unzip test.zip -d /root/         //解压到指定文件夹
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、文件" tabindex="-1"><a class="header-anchor" href="#_2、文件" aria-hidden="true">#</a> 2、文件</h3><ul><li><p>创建文件</p></li><li><p>vi ：1.txt 创建并打开 1.txt 文件</p></li><li><p>echo ：&#39;1234&#39;&gt;2.txt 创建 2.txt 文件并写入 1234</p></li><li><p>touch ：touch 3.txt 更改一个文件或目录的时间如果 2.txt 不存在，则创建空文件 2.txt</p></li><li><p>less、more、cat</p></li><li><p>三者都是将文件内容输出到标准输出，其中 less 和 more 可以分页显示，cat 是显示全部。</p></li><li><p>三者可以根据已经存在的文件创建新的文件。假设已经存在文件 1.txt。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- cat 1.txt &gt; 2.txt
- less 1.txt &gt; 3.txt
- more 1.txt &gt; 4.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时创建的文件内容都和 1.txt 中文件内容相同</li></ul><h3 id="_3、查看端口占用情况-如80" tabindex="-1"><a class="header-anchor" href="#_3、查看端口占用情况-如80" aria-hidden="true">#</a> 3、查看端口占用情况（如80）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -nlp   查看服务器端口占用情况
netstat -nlp | grep :3031   直接查找某一端口是否被占用
kill PID  杀掉某一进程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function x(p,g){const n=a("ExternalLinkIcon");return d(),s("div",null,[u,e("ul",null,[e("li",null,[e("p",null,[e("a",o,[i("cp"),r(n)]),i("： 复制")])]),m]),v])}const b=l(c,[["render",x],["__file","changyonglinuxmingling.html.vue"]]);export{b as default};
