import{_ as i,r as t,o as l,c as p,a as c,b as n,d as a,f as o,e as s}from"./app-iph3vjA0.js";const r={},u=s('<h4 id="_1、三栏布局-双飞翼、圣杯布局" tabindex="-1"><a class="header-anchor" href="#_1、三栏布局-双飞翼、圣杯布局" aria-hidden="true">#</a> 1、三栏布局 - 双飞翼、圣杯布局</h4><blockquote><p>三栏布局就是两边宽度固定,中间自适应的布局.</p><p>改变浏览器的宽度,两边的宽度不会变,只会中间区域的宽度变长变短.</p><p>实现三栏布局的方法有圣杯布局、双飞翼布局和 flex 布局</p></blockquote><ul><li><p>圣杯布局</p><p>原理:</p></li></ul><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/202205310942150.png" alt="image-20220531094243926" style="zoom:50%;"><ul><li>双飞翼布局</li></ul><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/202205310952312.png" alt="image-20220531095208239" style="zoom:50%;"><ul><li>code : https://codesandbox.io/s/kind-frost-3ggt2p?file=/index.html</li></ul><h4 id="_2、flex-布局" tabindex="-1"><a class="header-anchor" href="#_2、flex-布局" aria-hidden="true">#</a> 2、Flex 布局</h4><p>这里只记录一下常用属性，<a href="">详细参考</a></p><h5 id="👉🥕-父容器常用-api" tabindex="-1"><a class="header-anchor" href="#👉🥕-父容器常用-api" aria-hidden="true">#</a> 👉🥕 父容器常用 api：</h5><ul><li>justify-content</li><li>align-items</li></ul><h5 id="_1、justify-content" tabindex="-1"><a class="header-anchor" href="#_1、justify-content" aria-hidden="true">#</a> 1、justify-content</h5><p>用于设置子元素横向主轴排列顺序</p><ul><li>content：居中对齐</li><li>flex-start：起始端对齐</li><li>flex-end：起始端对齐</li><li>space-around：子容器沿主轴均匀分布，位于首尾两端的子容器到父容器的距离是子容器间距的一半。</li><li>space-between：子容器沿主轴均匀分布，位于首尾两端的子容器与父容器相切。</li></ul><h5 id="_2、align-items" tabindex="-1"><a class="header-anchor" href="#_2、align-items" aria-hidden="true">#</a> 2、align-items</h5><ul><li>flex-start：起始端对齐</li><li>flex-end：末尾段对齐</li><li>center：居中对齐</li><li>baseline：基线对齐，这里的 <code>baseline</code> 默认是指首行文字，即 <code>first baseline</code>，所有子容器向基线对齐，交叉轴起点到元素基线距离最大的子容器将会与交叉轴起始端相切以确定基线。</li><li>stretch：子容器沿交叉轴方向的尺寸拉伸至与父容器一致。</li></ul><h5 id="👉🥕-子容器-api" tabindex="-1"><a class="header-anchor" href="#👉🥕-子容器-api" aria-hidden="true">#</a> 👉🥕 子容器 api：</h5><ul><li>flex <ul><li>flex-basis ：基本大小，如 30px</li><li>flex-grow ：比例 , 如： 1</li><li>flex-shink : 缩放，如：10%</li></ul></li><li>align-slef <ul><li>flex-start</li><li>flex-end</li><li>center</li><li>baseline</li><li>stretch</li></ul></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/leancloud-assets/78e9030183f686e0b6ed.png~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/leancloud-assets/1d09fe5bb413a6dfa5dd.png~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p>',20),d={id:"_3、grid-栅格布局",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_3、grid-栅格布局","aria-hidden":"true"},"#",-1),m={href:"https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html",target:"_blank",rel:"noopener noreferrer"},v=s(`<ul><li>核心</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span> //栅格布局

	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span> // 每一列的列宽

	<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span> //每一行的行高
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>repeat()</li></ul><p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用 repeat()函数，简化重复的值。</p><p>repeat(重复次数,宽度 or 高度)</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span> //栅格布局

	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 33.3%<span class="token punctuation">)</span><span class="token punctuation">;</span> //  3列<span class="token punctuation">,</span> 每一列的列宽33.3%

	<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 33.3%<span class="token punctuation">)</span><span class="token punctuation">;</span> // 3行<span class="token punctuation">,</span> 每一列的高33.3%
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>auto-fill 关键字</li></ul><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 auto-fill 关键字表示自动填充。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>

	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>* auto-fill *<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>grid-row-gap &amp;&amp; grid-column-gap</li></ul><p>grid-row-gap 属性设置行与行的间隔（行间距），grid-column-gap 属性设置列与列的间隔（列间距）。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
	<span class="token property">grid-row-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>

	<span class="token property">grid-column-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>grid-gap</li></ul><p>grid-gap 属性是 grid-column-gap 和 grid-row-gap 的合并简写形式，语法如下。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">grid-gap</span><span class="token punctuation">:</span> &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 grid-gap 省略了第二个值，浏览器认为第二个值等于第一个值。</p><ul><li>justify-items 属性，align-items 属性，place-items 属性</li></ul>`,17);function h(k,b){const e=t("ExternalLinkIcon");return l(),p("div",null,[c(" @format "),u,n("h4",d,[g,a(" 3、"),n("a",m,[a("Grid 栅格布局"),o(e)])]),v])}const x=i(r,[["render",h],["__file","changyongbujufangan.html.vue"]]);export{x as default};
