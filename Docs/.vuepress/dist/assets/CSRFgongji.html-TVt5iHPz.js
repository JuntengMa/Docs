import{_ as e,o,c as i,a as r,e as t}from"./app-iph3vjA0.js";const n={},a=t('<h4 id="_01、-什么是csrf攻击" tabindex="-1"><a class="header-anchor" href="#_01、-什么是csrf攻击" aria-hidden="true">#</a> 01、 什么是CSRF攻击?</h4><p>CSRF攻击指的是**跨站请求伪造,**攻击者诱导用户进入第三方网站,然后该网站向被攻击者网站发送跨站请求.</p><p>如果用户在被攻击者网站中保存了登录状态,攻击者就可以利用这个状态,绕过后台验证,冒充用户向服务器执行一些操作;</p><blockquote><p>用户在 a 网站登录，并保存cookie等信息，黑客诱导用户进入了 b 网站，b网站自动获取用户在a页面存储的cookie等信息，</p><p>冒充用户，对a网站进行攻击</p><p>👇👇👇</p><p>攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。</p></blockquote><h4 id="_02、csrf攻击分类" tabindex="-1"><a class="header-anchor" href="#_02、csrf攻击分类" aria-hidden="true">#</a> 02、CSRF攻击分类</h4><blockquote><ul><li>GET请求的CSRF攻击, 通常用img标签构建请求,用户打开网站的时候,自动发送请求</li><li>POST请求CSRF攻击,比如说构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单</li><li>链接类型的 CSRF 攻击，比如说在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。</li></ul><p>CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论</p><p>区，攻击可以直接在本域下进行，而且这种攻击更加危险。</p></blockquote><h4 id="_03、防御方法" tabindex="-1"><a class="header-anchor" href="#_03、防御方法" aria-hidden="true">#</a> 03、防御方法</h4><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。</p><ul><li><strong>第一种是同源检测的方法</strong>，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止。这种方式的缺点是有些情况下 referer 可以被伪造。还有就是我们这种方法同时把搜索引擎的链接也给屏蔽了，所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。</li><li><strong>第二种方法是使用 CSRF Token 来进行验证</strong>，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。</li><li><strong>第三种方式使用双重 Cookie 验证的办法</strong>，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</li><li><strong>第四种方式是使用在设置 cookie 属性的时候设置 Samesite</strong> ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。</li></ul><p>https://juejin.cn/post/6844904090019840007#heading-5</p>',10);function c(s,l){return o(),i("div",null,[r("more"),a])}const p=e(n,[["render",c],["__file","CSRFgongji.html.vue"]]);export{p as default};
