import{_ as n,r as c,o as l,c as r,a as s,b as e,d as o,f as i,w as p,e as t}from"./app-iph3vjA0.js";const d={},h=t('<h5 id="_1、什么是-tcp、ip" tabindex="-1"><a class="header-anchor" href="#_1、什么是-tcp、ip" aria-hidden="true">#</a> 1、什么是 TCP、IP</h5><blockquote><p>TCP/ IP 是互联网相关的各类协议的总称</p></blockquote><h5 id="_2、tcp-ip-分层" tabindex="-1"><a class="header-anchor" href="#_2、tcp-ip-分层" aria-hidden="true">#</a> 2、TCP/IP 分层</h5><blockquote><p>应用层 —&gt;传输层 —&gt;网络层 —&gt;数据链路层</p></blockquote><h5 id="_3、应用层作用" tabindex="-1"><a class="header-anchor" href="#_3、应用层作用" aria-hidden="true">#</a> 3、应用层作用</h5><blockquote><p>应用层决定了向用户提供应用服务时通信的活动</p><p>TCP/IP 协议族内预存了各类通用的应用服务。比如，<strong>FTP</strong>（FileTransfer Protocol，文件传输协议）和 <strong>DNS</strong>（Domain Name System，域名系统）服务就是其中两类。</p><p><code>HTTP 协议也处于该层</code></p></blockquote><h5 id="_4、传输层作用" tabindex="-1"><a class="header-anchor" href="#_4、传输层作用" aria-hidden="true">#</a> 4、传输层作用</h5>',7),u=e("p",null,"传输层对上层应用层 ， 提供处于网络连接中的两台计算机之间的数据传输",-1),g=e("p",null,"在传输层有两个性质不同的协议：",-1),_=e("strong",null,"TCP",-1),C=e("li",null,[o("TCP 提供"),e("strong",null,"面向连接"),o("的服务。在传送数据之前"),e("code",null,"必须先建立连接"),o("，数据传送结束后要释放连接。")],-1),P=e("strong",null,"可靠",-1),T=e("li",null,[o("TCP "),e("strong",null,"一般用于文件传输、发送和接收邮件、远程登录等场景"),o("。")],-1),m=e("li",null,[e("strong",null,"UDP（User Data Protocol，用户数据报协议）。"),e("ul",null,[e("li",null,[e("strong",null,"UDP 在传送数据之前不需要先建立连接"),o("，远程主机在收到 UDP 报文后，不需要给出任何确认。")]),e("li",null,[o("虽然 UDP "),e("strong",null,"不提供可靠交付"),o("，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等")])])],-1),b=t('<h5 id="_5、网络层-又名网络互连层-作用" tabindex="-1"><a class="header-anchor" href="#_5、网络层-又名网络互连层-作用" aria-hidden="true">#</a> 5、网络层（又名网络互连层）作用</h5><blockquote><p>网络层用来处理在网络上流动的数据包。</p><p>数据包是网络传输的最小数据单位。</p><p>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><p>IP（Internet Protocol）网际协议位于网络层</p></blockquote><h5 id="_6、链路层-又名数据链路层-网络接口层" tabindex="-1"><a class="header-anchor" href="#_6、链路层-又名数据链路层-网络接口层" aria-hidden="true">#</a> 6、链路层（又名数据链路层，网络接口层）</h5><blockquote><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p></blockquote><h5 id="_7、tcp-ip-通信传输流" tabindex="-1"><a class="header-anchor" href="#_7、tcp-ip-通信传输流" aria-hidden="true">#</a> 7、TCP/IP 通信传输流</h5><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212210823593.png" alt="image-20220212210823593"></p><h5 id="_8、-tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#_8、-tcp-三次握手" aria-hidden="true">#</a> 8、==TCP 三次握手==</h5><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220212211759313.png" alt="image-20220212211759313"></p><blockquote><p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。</p><p>用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。</p><p>握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize）和 ACK（acknowledgement）。</p><p>1、发送端首先发送一个带 SYN 标志的数据包给对方。</p><p>2、接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。</p><p>3、最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</p><p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p></blockquote><h5 id="_9、-为什么是三次握手而不是四次或者两次" tabindex="-1"><a class="header-anchor" href="#_9、-为什么是三次握手而不是四次或者两次" aria-hidden="true">#</a> 9、==为什么是三次握手而不是四次或者两次==</h5><blockquote><p>第三次握手除了让服务端知道，服务端发送能力和客户端的接收能力正常之外，</p><p><strong>还可以防止数据报延迟带来的不必要的资源消耗</strong>：</p><ol><li>当客户端发起 tcp 第一次握手的请求时，因为网络问题滞留在网络中，这时候<u>客户端因为等待太久没有响应所以自动重发了握手请求</u>并完成了所有数据请求关闭了与服务端的链接</li><li>这时候服务端才接收到第一次滞留在网络中的握手请求，服务端会向客户端发送第二次握手并处于等待第 3 次握手状态，客户端接收到第二次握手请求后发现是过期的请求就可以通过停止发送第三次握手，服务端一段时间没接到第三次握手请求会自动关闭请求监听。</li><li>握手次数两次或四次都有问题，四次浪费资源，两次又不能保证因数据延迟的损耗</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202171503538.png" alt="image-20220217150301454"></p><h5 id="_10、-四次挥手" tabindex="-1"><a class="header-anchor" href="#_10、-四次挥手" aria-hidden="true">#</a> 10、==四次挥手==</h5><p>① 四次挥手过程详解</p><p>建立一个 TCP 连接需要三次握手，而终止一个 TCP 连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这是由于 TCP 的<strong>半关闭</strong></p><p>（half-close）特性造成的，TCP 提供了连接的一端，在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 连接的释放需要发送四个包（执行四个步骤），因此称为四次挥手(<code>Four-way handshake</code>)，<strong>客户端或服务端均可主动发起挥手动作</strong>。</p><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202171558813.png" alt="image-20220217155856745"></p><p>回顾一下上图中符号的意思：</p><ul><li><code>FIN</code> ：连接终止位</li><li><code>seq</code>：发送的第一个字节的序号</li><li><code>ACK</code>：确认报文段</li><li><code>ack</code>：确认号。希望收到的下一个数据的第一个字节的序号</li></ul><p><strong>1）第一次挥手</strong>：客户端发送一个 FIN 报文（请求连接终止：FIN = 1），报文中会指定一个序列号 seq = u。并<strong>停止再发送数据，主动关闭 TCP 连接</strong>。此时客户端处于 <code>FIN_WAIT1</code> 状态，等待服务端的确认。</p><blockquote><p><code>FIN-WAIT-1</code> - 等待远程 TCP 的连接中断请求，或先前的连接中断请求的确认；</p></blockquote><p><strong>2）第二次挥手</strong>：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态。</p><blockquote><p><code>CLOSE-WAIT</code> - 等待从本地用户发来的连接中断请求；</p></blockquote><p><strong>此时的 TCP 处于半关闭状态，客户端到服务端的连接释放</strong>。客户端收到服务端的确认后，进入<code>FIN_WAIT2</code>（终止等待 2）状态，等待服务端发出的连接释放报文段。</p><blockquote><p><code>FIN-WAIT-2</code> - 从远程 TCP 等待连接中断请求；</p></blockquote><p><strong>3）第三次挥手</strong>：如果服务端也想断开连接了（没有要向客户端发出的数据），和客户端的第一次挥手一样，发送 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态，等待客户端的确认。</p><blockquote><p><code>LAST-ACK</code> - 等待原来发向远程 TCP 的连接中断请求的确认；</p></blockquote><p><strong>4）第四次挥手</strong>：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答（ack = w+1），且把服务端的序列值 +1 作为自己 ACK 报文的序号值（seq=u+1），此时客户端处于 <strong><code>TIME_WAIT</code> （时间等待）状态</strong>。</p><p>11、参考资料 https://www.sohu.com/a/434706678_100004247</p><p>https://segmentfault.com/a/1190000039165592</p>',31);function k(f,q){const a=c("font");return l(),r("div",null,[s(" @format "),h,e("blockquote",null,[u,g,e("ul",null,[e("li",null,[_,o("（Transmission ControlProtocol，传输控制协议） "),e("ul",null,[C,e("li",null,[e("blockquote",null,[e("p",null,[o("TCP 不提供广播或多播服务。由于 "),i(a,{color:"red"},{default:p(()=>[o("TCP 要提供"),P,o("的，面向连接的传输服务")]),_:1}),o("（TCP 的可靠体现在 TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、流量控制、拥塞控制机制，在数据传完后，还会四次挥手断开连接用来节约系统资源），这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。")])])]),T])]),m])]),b])}const N=n(d,[["render",k],["__file","4、TCPlianjie.html.vue"]]);export{N as default};
