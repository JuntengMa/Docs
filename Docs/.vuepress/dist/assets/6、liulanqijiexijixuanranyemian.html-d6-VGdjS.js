import{_ as e,o,c,a as t,e as a}from"./app-iph3vjA0.js";const p={},i=a('<p>https://juejin.cn/post/6844903565610188807#comment</p><p>https://juejin.cn/post/7004465786425180197</p><h5 id="_1、渲染的过程如下图" tabindex="-1"><a class="header-anchor" href="#_1、渲染的过程如下图" aria-hidden="true">#</a> 1、渲染的过程如下图：</h5><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/202202171639329.webp" alt=""></p><h5 id="_2、浏览器的渲染过程主要包括以下几步" tabindex="-1"><a class="header-anchor" href="#_2、浏览器的渲染过程主要包括以下几步" aria-hidden="true">#</a> 2、浏览器的渲染过程主要包括以下几步：</h5><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树(Render Tree)。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息 ( 回流 )。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><h5 id="_3、构建-dom-树" tabindex="-1"><a class="header-anchor" href="#_3、构建-dom-树" aria-hidden="true">#</a> 3、构建 DOM 树</h5><p>当浏览器接收到服务器响应来的 HTML 文档后，会遍历文档节点，生成 DOM 树。</p><p>需要注意的是，<code>DOM树的生成过程中可能会被CSS和JS的加载执行阻塞。渲染阻塞问题下文会讲。</code></p><h5 id="_5、渲染阻塞" tabindex="-1"><a class="header-anchor" href="#_5、渲染阻塞" aria-hidden="true">#</a> 5、渲染阻塞</h5><blockquote><p>当浏览器遇到一个 <code>script </code>标记时，DOM 构建将<code>暂停</code>，直至脚本完成执行，然后继续构建 DOM。</p><p>每次去<code>加载和执行</code>JavaScript 脚本都会<code>严重地阻塞DOM树的构建</code>;</p><p>如果 JavaScript 脚本还操作了 CSSOM，而正好这个 CSSOM 还没有下载和构建，浏览器甚至会延迟脚本执行和构建 DOM，直至完成其 CSSOM 的下载和构建。</p><p>所以，script 标签的位置很重要。实际使用时，可以遵循下面两个原则：</p><ul><li>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。</li><li>JS 置后：我们通常把 JS 代码放到页面底部，且 JavaScript 应尽量少影响 DOM 的构建。</li></ul><p>当解析 html 的时候，会把新来的元素插入 dom 树里面，同时去查找 css，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p><p>例如： div p {font-size: 16px}，会先寻找所有 p 标签并判断它的父标签是否为 div 之后才会决定要不要采用这个样式进行渲染）。 所以，我们平时写 CSS 时，尽量用 id 和 class，千万不要过渡层叠。</p></blockquote><h4 id="一些需要注意的问题" tabindex="-1"><a class="header-anchor" href="#一些需要注意的问题" aria-hidden="true">#</a> 一些需要注意的问题：</h4><blockquote><p>浏览器获取的 html 资源后==自上而下==开始解析，生成 dom 树；</p><p>如果遇到 style 的内联样式和 link 会将 css 交由 css 渲染器构建 css 规则树；</p><p>其中加载 link 引入的外部样式文件是<code>异步加载</code>的，并且<code>整个 css 规则树也是与 dom 树的构建是并行</code>的；</p></blockquote><p>2、CSS 加载会不会影响 DOM 解析？会不会影响 DOM 树渲染？</p><blockquote><p>https://segmentfault.com/a/1190000018130499<br> 结论： 不会影响 DOM 解析，但是会影响 DOM 渲染</p><ul><li>DOM 树解析 和 CSS 解析 是异步的，互不阻塞</li><li>Render Tree 需要 DOM 树+Css 规则树 ，故 css 加载未完成之前，页面无法正常渲染</li></ul></blockquote><p>3、JS 执行会造成 Dom 构建吗？</p><blockquote><ul><li><p>当浏览器遇到一个 <code>script </code>标记时，DOM 构建将<code>暂停</code>，直至脚本完成执行，然后继续构建 DOM。</p></li><li><p>如果 JavaScript 脚本还操作了 CSSOM，而正好这个 CSSOM 还没有下载和构建，浏览器甚至会延迟脚本执行和构建 DOM，直至完成其 CSSOM 的下载和构建。</p></li></ul></blockquote><p>4、html 与 js 是否是并行下载</p><blockquote><p>答：不是</p><p>html 下载构建 dom 后读取到外联 js tag 才会下载</p></blockquote><p>5、是 js 的下载阻塞了页面的渲染还是 js 的执行阻塞了页面的渲染，还是两者都会阻塞页面</p><blockquote><p>答：两者都会（js 的下载和执行都会阻塞页面渲染） DOM 树解析到非异步的外联 js 时会阻塞住，在它加载并且执行完之前，不会往下解析 DOM 树。</p></blockquote><p>3，script 标签放在 head 中与放在 body 中，是影响了 js 的下载开始时间还是执行开始时间</p><blockquote><p>如果不考虑 http 并发请求数的限制，并且忽略掉接收页面 response body 的耗时的话，在有预解析的浏览器上，外联的 script 放哪都不会（太）影响加载开始时间。</p><p>需要注意的是，虽然加载是并行化的，但 js 会阻塞住 dom 树解析，因而你把 script[src]放在 head 中会阻塞住首屏渲染，最好还是放在 body 尾部。</p></blockquote><p>4，css，图片以及一些其它的外部资源的下载是否与 html，js 的下载并行</p><blockquote><p>除了 CSS 和 JS，其他外部资源都会并行</p></blockquote>',25);function l(s,d){return o(),c("div",null,[t(" @format "),i])}const n=e(p,[["render",l],["__file","6、liulanqijiexijixuanranyemian.html.vue"]]);export{n as default};
