import{_ as n,o as s,c as a,a as t,e as p}from"./app-1sZ14lpL.js";const o={},e=p(`<h5 id="_1、事件" tabindex="-1"><a class="header-anchor" href="#_1、事件" aria-hidden="true">#</a> 1、事件</h5><p><strong>JavaScript 是一门单线程的，非阻塞的脚本语言</strong></p><blockquote><p>单线程： 任何时候都只有一个主线程（执行栈）处理所有任务</p><p>非阻塞：有异步任务时，js 会产生一个任务队列，任务队列中的任务不会立即执行，当主线程任务执行完毕，则检查任务队列中是否</p><p>有回调，有则压入主线程执行</p></blockquote><blockquote><p><strong>JS 执行机制可以看做一个主线程加上一个任务队列.</strong></p><p>同步任务都在主线程(这里的主线程就是 JS 引擎线程)上执行，会形成一个<code>执行栈</code></p><p>主线程之外，事件触发线程管理着一个<code>任务队列</code>，只要异步任务有了运行结果，就在<code>任务队列</code>之中放一个事件回调</p><p>一旦<code>执行栈</code>中的所有同步任务执行完毕(也就是 JS 引擎线程空闲了)，系统就会读取<code>任务队列</code>，将可运行的异步任务(任务队列中的事件</p><p>回调，只要任务队列中有事件回调，就说明可以执行) 添加到执行栈中，开始执行。</p></blockquote><blockquote><p>js 执行期间，同步任务都在执行栈中执行，异步任务则被压入任务队列，当同步任务执行完成，则读取任务队列中的任务，当任务队</p><p>列中有事件回调，则将其添加到执行栈中开始执行</p></blockquote><h5 id="_2、事件循环" tabindex="-1"><a class="header-anchor" href="#_2、事件循环" aria-hidden="true">#</a> 2、事件循环</h5><p>取自《深入浅出 VueJs》p160，什么是事件循环？</p><blockquote><p>处理异步任务时，任务队列有<code>宏任务队列</code>和<code>微任务队列</code>之分,</p><p>当执行栈中的任务都执行完毕之后，会去检查==微任务队列==中是否有事件存在, 如果有，则依次执行微任务队列中事件的回调，直到</p><p>执行栈清空；</p><p>然后去检查==宏任务队列==中是否有事件存在,如果有,则依次执行微任务队列中事件的回调，直到执行栈清空；</p><p>最后再去检查==微任务队列==中是否有事件存在，如此循环重复该过程，叫做事件循环</p></blockquote><p>事件循环解释如下：👇👇👇👇👇👇👇👇👇👇👇👇</p><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image-20220214101822938.png" alt="image-20220214101822938"></p><h5 id="_3、宏任务、微任务" tabindex="-1"><a class="header-anchor" href="#_3、宏任务、微任务" aria-hidden="true">#</a> 3、宏任务、微任务</h5><blockquote><p><strong>宏任务</strong></p><p>我们可以将每次<strong>执行栈执行的代码</strong>当做是一个宏任务(包括每次从事件队列中获取一个事件回调并放到执行栈中执行)， 每一个宏任务会从头到尾执行完毕，不会执行其他</p><p>由于<code>JS引擎线程</code>和<code>GUI渲染线程</code>是互斥的关系，浏览器为了能够使<code>宏任务</code>和<code>DOM任务</code>有序的进行，会在一个<code>宏任务</code>执行结果后，在下一个<code>宏任务</code>执行前，<code>GUI渲染线程</code>开始工作，对页面进行渲染</p><p>宏任务 --&gt; GUI 渲染 --&gt; 宏任务</p><p><strong>常见的宏任务</strong></p><p>主代码块</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate ()-Node</li><li>requestAnimationFrame ()-浏览器</li></ul><p><strong>微任务</strong></p><p>我们已经知道<code>宏任务</code>结束后，会执行渲染，然后执行下一个<code>宏任务</code>， 而微任务可以理解成在当前<code>宏任务</code>执行后立即执行的任务</p><p>当一个<code>宏任务</code>执行完，会在渲染前，将执行期间所产生的所有<code>微任务</code>都执行完</p><p>宏任务 -&gt; 微任务 -&gt; GUI 渲染 -&gt; 宏任务 -&gt; ...</p><p><strong>常见微任务</strong></p><ul><li>process.nextTick ()-Node</li><li>Promise.then()</li><li>catch</li><li>finally</li><li>Object.observe (此 api 已废弃，目前更通用的 api 为 es6 的 proxy)</li><li>MutationObserver</li></ul></blockquote><p>4、为什么要区分宏任务和微任务</p><blockquote><p>事件循环中的任务被分为宏任务和微任务，是为了给高优先级任务一个插队的机会：微任务比宏任务有更高优先级。</p></blockquote><p>https://segmentfault.com/a/1190000041522327</p><p>5、练习</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;err&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考察知识点：</p><p>1、同步任务、异步任务</p><p>2、宏任务微任务</p><p>3、<code>Promise构造函数是同步执行的，then方法是异步执行的</code></p><p>4、<code>Promise resolve reject执行问题</code></p>`,22);function c(u,l){return s(),a("div",null,[t(" @format "),e])}const k=n(o,[["render",c],["__file","2、JavaScriptyunxingjizhi（Event Loop）.html.vue"]]);export{k as default};
