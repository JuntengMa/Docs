import{_ as c,r as l,o as u,c as i,a as r,b as n,d as a,f as s,w as e,e as p}from"./app-iph3vjA0.js";const d={},k=n("h5",{id:"_1、vue-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、vue-是什么","aria-hidden":"true"},"#"),a(" 1、Vue 是什么")],-1),v=n("p",null,[a("Vue 是一套用于构建用户界面的"),n("strong",null,"渐进式框架")],-1),m=n("strong",null,"渐进式框架",-1),g=n("strong",null,"组件系统和双向数据绑定",-1),b={href:"https://www.google.com.tw/url?sa=i&url=https%3A%2F%2Fitaigi.tw%2Fk%2F%25E7%25A8%258D%25E7%25AD%2589%25E4%25B8%2580%25E4%25B8%258B%2F&psig=AOvVaw3v28_E8lnjlEMSY6jmTrxg&ust=1641886544958000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCNCv05TWpvUCFQAAAAAdAAAAABAD",target:"_blank",rel:"noopener noreferrer"},x=p('<h5 id="_2、vue-优缺点" tabindex="-1"><a class="header-anchor" href="#_2、vue-优缺点" aria-hidden="true">#</a> 2、Vue 优缺点</h5><blockquote><p>优点：渐进式，组件化，轻量级，虚拟 dom，响应式，单页面路由，数据与视图分开</p><p>缺点：spa 不利于 Seo 优化，不支持 IE8 以下，首屏加载时间长</p></blockquote><h5 id="_3、vue-react-区别" tabindex="-1"><a class="header-anchor" href="#_3、vue-react-区别" aria-hidden="true">#</a> 3、Vue &amp; React 区别</h5><blockquote><p>相同点：spa、虚拟 dom、组件化、单向数据流、ssr</p><p>不同点：</p><ul><li>Vue 模板语法，React jsx 语法</li><li>Vue 响应式处理数据，React 手动（setState）</li><li>React 单向数据绑定 ， Vue 双向数据绑定</li><li>React 用 redux ， Vue 用 Vuex</li></ul></blockquote><h5 id="_4、mvvm-是什么-和-mvc-有何区别呢" tabindex="-1"><a class="header-anchor" href="#_4、mvvm-是什么-和-mvc-有何区别呢" aria-hidden="true">#</a> 4、MVVM 是什么？和 MVC 有何区别呢？</h5>',5),h=n("p",null,"https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",-1),q={href:"https://juejin.im/post/6844903479568252935",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",target:"_blank",rel:"noopener noreferrer"},_=p(`<h5 id="_5、vue-中当前组件所有属性快速传递给子组件" tabindex="-1"><a class="header-anchor" href="#_5、vue-中当前组件所有属性快速传递给子组件" aria-hidden="true">#</a> 5、Vue 中当前组件所有属性快速传递给子组件</h5><blockquote><p>v-bind</p></blockquote><p><strong>demo:</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>
	<span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.label<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.disabled !== true<span class="token punctuation">&quot;</span></span>
	<span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 5px</span><span class="token punctuation">&quot;</span></span></span>
	<span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.data<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClickHeadBtn(item.params)<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
    {{ item.label }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span><span class="token string">&quot;small&quot;</span><span class="token punctuation">,</span>
     <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6、vue-修饰符" tabindex="-1"><a class="header-anchor" href="#_6、vue-修饰符" aria-hidden="true">#</a> 6、Vue 修饰符</h5><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image-20211104102810965.png" alt="image-20211104102810965" style="zoom:80%;border-radius:20px;"><h5 id="_7、vue-内置指令" tabindex="-1"><a class="header-anchor" href="#_7、vue-内置指令" aria-hidden="true">#</a> 7、Vue 内置指令</h5><blockquote><p>https://cn.vuejs.org/v2/api/#v-text</p></blockquote><h5 id="_8、组件之间的传值方式有哪些" tabindex="-1"><a class="header-anchor" href="#_8、组件之间的传值方式有哪些" aria-hidden="true">#</a> 8、组件之间的传值方式有哪些？</h5>`,10),y=n("p",null,"1、父传子：",-1),j=n("li",null,"子组件用 props 接收",-1),w={href:"https://cn.vuejs.org/v2/api/#provide-inject",target:"_blank",rel:"noopener noreferrer"},V=p('<blockquote><p>2、子传父：</p><ul><li>通过<code>this.$emit(‘xxxxx’,paload)</code></li><li>$refs 获取组件实例</li></ul></blockquote><blockquote><p>3、兄弟组件：</p><ul><li>eventbus 处理</li><li>通过公共上层组件传递</li></ul></blockquote><blockquote><p>4、使用 Vuex 全局状态管理</p><p>5、本地缓存</p></blockquote><h5 id="_9、eventbus-原理及优缺点" tabindex="-1"><a class="header-anchor" href="#_9、eventbus-原理及优缺点" aria-hidden="true">#</a> 9、Eventbus 原理及优缺点</h5><blockquote><p><strong>核心</strong></p><p><code>export default EventBus = new Vue() </code>，通过创建一个 Vue 实例来存储需要通信的数据。</p><p>通过发布订阅者模式，完成数据传递</p><ul><li>EventBus.$on(&quot;bMsg&quot;, (msg) =&gt; { this.msg = msg;}); //接收数据</li><li>EventBus.$emit(&quot;aMsg&quot;, &#39;要发送的数据&#39;); //发送数据</li></ul><p><strong>优点</strong>：</p><ul><li>可以解决层层嵌套或同级组件数据传递的痛点</li></ul><p><strong>缺点</strong>：</p><ul><li>Vue 是 Spa 单页应用，当某页面刷新，与之关联的 bus 也会被清除</li><li>如果业务有反复操作的页面，EventBus 在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理 EventBus 在项目中的关系。通常会用到，在 Vue 页面销毁时，同时移除 EventBus 事件监听。</li><li>由于是都使用一个 Vue 实例，所以容易出现重复触发的情景，两个页面都定义了同一个事件名，并且没有用$off 销毁（常出现在路由切换时）。</li></ul></blockquote><h5 id="_10、-v-if和v-show有何区别" tabindex="-1"><a class="header-anchor" href="#_10、-v-if和v-show有何区别" aria-hidden="true">#</a> 10、<code> v-if</code>和<code>v-show</code>有何区别？</h5>',6),M=n("li",null,[n("p",null,"相同点："),n("p",null,"都能控制元素显隐")],-1),O=n("p",null,"不同点：",-1),D=n("p",null,[a("2、v-show 为 false 的时候指示隐藏了当前元素，类似"),n("code",null,"display:none"),a(";")],-1),E=n("li",null,[n("p",null,[a("故频繁或者大数量显隐使用"),n("code",null,"v-show"),a("，否则使用"),n("code",null,"v-if")])],-1),$=p(`<h5 id="_11、为什么v-if和v-for不建议用在同一标签" tabindex="-1"><a class="header-anchor" href="#_11、为什么v-if和v-for不建议用在同一标签" aria-hidden="true">#</a> 11、为什么<code>v-if</code>和<code>v-for</code>不建议用在同一标签</h5><ul><li><p>在 Vue2 中，<code>v-for</code>优先级是高于<code>v-if</code>的 ，当 v-for 和 v-if 同时存在，优先执行 v-for，再执行 v-if，会增加无用操作</p><p>demo：</p><p>下面的代码会先把 7 个元素都遍历出来，然后再一个个判断是否为 3，并把 3 给==销毁==，这样的坏处就是，渲染了无用的 3 节点，增加无用的 dom 操作</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in [1, 2, 3, 4, 5, 6, 7]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item !== 3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 {{item}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解决方案：</p><ol><li><code>computed </code>过滤</li><li><code>template</code>嵌套</li></ol></li></ul><h5 id="_12、vue-响应式数据理解" tabindex="-1"><a class="header-anchor" href="#_12、vue-响应式数据理解" aria-hidden="true">#</a> 12、Vue 响应式数据理解</h5><blockquote><p>Vue 响应式数据核心是运用了<code>Objec.defineProperty()</code></p><p>当把 js 对象传入 Vue 实例的 data，Vue 会遍历这个对象所有<code>property</code> , <code>Objec.defineProperty()</code>把所有的<code>property</code>都转为<code>getter / setter</code> , 使<code>property</code> 在被访问或修改的时候通知变更，然后 view 更新</p><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image-20211027170239541.png" alt="image-20211027170239541"></p><p>https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96</p></blockquote><h5 id="_13、不需要响应式的数据应该怎么处理" tabindex="-1"><a class="header-anchor" href="#_13、不需要响应式的数据应该怎么处理" aria-hidden="true">#</a> 13、不需要响应式的数据应该怎么处理？</h5><ol><li>将数据定义在 data return 之前即：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>list1 <span class="token operator">=</span> <span class="token punctuation">{</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <span class="token punctuation">}</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>list2 <span class="token operator">=</span> <span class="token punctuation">{</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <span class="token punctuation">}</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>list3 <span class="token operator">=</span> <span class="token punctuation">{</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <span class="token punctuation">}</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>list4 <span class="token operator">=</span> <span class="token punctuation">{</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <span class="token punctuation">}</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>list5 <span class="token operator">=</span> <span class="token punctuation">{</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>Object.freeze()</code></li></ol><p>用于冻结某对象，冻结之后将无法再改变对象属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">list1</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>xxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token literal-property property">list2</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>xxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token literal-property property">list3</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>xxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token literal-property property">list4</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>xxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token literal-property property">list5</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>xxxxxxxxxxxxxxxxxxxxxxxx<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_14、双向数据绑定-单向数据流" tabindex="-1"><a class="header-anchor" href="#_14、双向数据绑定-单向数据流" aria-hidden="true">#</a> 14、双向数据绑定 &amp; 单向数据流</h5><ul><li><strong>双向数据绑定：</strong></li></ul><blockquote><p>1、Vue 提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><p>2、<code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素</p><p>3、但 <code>v-model</code> 本质上不过是语法糖。它负责<strong>监听用户的输入事件</strong>（<code>@input</code>）以<strong>更新数据</strong>(<code>@change</code>)，并对一些极端场景进行一些特殊处理。</p></blockquote><ul><li><strong>单向数据流：</strong></li></ul><blockquote><p>1、Vue 父子组件之间数据传递，遵循单向数据流的，父组件可以向子组件传递 props，但是子组件不能修改父组件传递来的 props，子组件只能通过事件通知父组件进行数据更改</p></blockquote><ul><li><strong>小结：</strong></li></ul><blockquote><p>Vue 双向数据绑定和单向数据流<strong>并不冲突</strong>，本质上 Vue 依然是单向数据流，v-model 只是对表单事件做了一层封装用于更好的处理表单数据</p></blockquote><h5 id="_15、插槽" tabindex="-1"><a class="header-anchor" href="#_15、插槽" aria-hidden="true">#</a> 15、插槽</h5><p>用于 Vue 内容分发，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口。</p><blockquote><p><strong>1. 语法</strong>：</p><p>​ <code>&lt;slot name=&quot;xxxx&quot;&gt;&lt;/slot&gt;</code></p><p><strong>2. 使用</strong>：</p><ul><li><p>假如内容要插入的位置如下</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 
    	// 内容插入这里
    	👉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slot-test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是插槽默认值，在没有传递数据的时候显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>👈 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.6.0 版本前</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slot-test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 我是要插入的内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>2.6.0 版本以后（ Vue 提供了<code> v-slot</code>标签）</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>slot-test</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 我是要插入的内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h5 id="_16、provide-inject" tabindex="-1"><a class="header-anchor" href="#_16、provide-inject" aria-hidden="true">#</a> 16、Provide-inject</h5><p>文档：https://cn.vuejs.org/v2/api/#provide-inject</p><p><code>provide</code> 选项允许我们指定我们想要提供给后代组件的数据/方法</p><p>然后在任何后代组件里，我们都可以使用 <code>inject</code> 选项来接收指定的我们想要添加在这个实例上的 property</p><p>Demo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//parent component</span>
<span class="token function-variable function">provide</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">getMap</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getMap<span class="token punctuation">,</span>  <span class="token comment">//这样写是非响应式，provide数据变化，inject不会更新数据</span>
    <span class="token literal-property property">responsive_getMap</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token comment">//响应式数据需要把整个this结构传递给inject</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//child component</span>

<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;getMap&#39;</span><span class="token punctuation">]</span>

# or

<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">getMap1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;getMap1&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">responsive_getMap1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;responsive_getMap1&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#####17、 父子组件生命周期顺序</p><p>子组件创建时间： 父组件<code>beforeMounted</code> 和 <code>Mounted</code>之间</p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image-20211213164116578.png" alt="image-20211213164116578" style="zoom:80%;float:left;"><p>代码： https://raw.githubusercontent.com/tengyuanOasis/Vue-test/blob/main/learn-LifeCycle/index.html</p>`,31),A={id:"_18、对象新属性无法更新视图-删除属性无法更新视图-为什么-怎么办",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_18、对象新属性无法更新视图-删除属性无法更新视图-为什么-怎么办","aria-hidden":"true"},"#",-1),C=p(`<blockquote><p>原因：</p><ul><li><code>Object.defineProperty</code>没有对<code>对象</code>的新属性进行属性劫持</li></ul><p>方案：</p><ul><li><p>对象新属性无法更新视图：使用<code>Vue.$set(obj, key, value)</code>，组件中<code>this.$set(obj, key, value)</code></p></li><li><p>删除属性无法更新视图：使用<code>Vue.$delete(obj, key)</code>，组件中<code>this.$delete(obj, key)</code></p></li></ul></blockquote><h5 id="_19、为什么只对对象-数据劫持-而要对数组进行方法重写" tabindex="-1"><a class="header-anchor" href="#_19、为什么只对对象-数据劫持-而要对数组进行方法重写" aria-hidden="true">#</a> 19、为什么只对对象 ==数据劫持==，而要对数组进行方法重写？</h5><ul><li>因为对象最多也就几十个属性，拦截起来数量不多，但是数组可能会有几百几千项，拦截起来非常耗性能，所以直接重写数组原型上的方法，是比较节省性能的方案</li><li>修改数组数据<code> arr[index] = xxx</code>无法更新视图解决方案： <ul><li>使用数组的 splice 方法，<code>arr.splice(index, 1, item)</code></li><li>使用<code>Vue.$set(arr, index, value)</code></li></ul></li></ul><h5 id="_20、props-怎么自定义验证" tabindex="-1"><a class="header-anchor" href="#_20、props-怎么自定义验证" aria-hidden="true">#</a> 20、props 怎么自定义验证</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 返回值为true则验证不通过，报错</span>
          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
    	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_21、watch-的-immediate-属性有什么用" tabindex="-1"><a class="header-anchor" href="#_21、watch-的-immediate-属性有什么用" aria-hidden="true">#</a> 21、watch 的 immediate 属性有什么用？</h5><p>使用<code>immediate</code>为<code>true</code>时，会初始执行一次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">searchInputValue</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token literal-property property">handler</span><span class="token operator">:</span> <span class="token string">&#39;getList&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_22、computed-如何实现传参" tabindex="-1"><a class="header-anchor" href="#_22、computed-如何实现传参" aria-hidden="true">#</a> 22、computed 如何实现传参？</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ total(3) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

// js computed: { total() { return function(n) { return n * this.num } }, }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_23、class-与-style-如何动态绑定" tabindex="-1"><a class="header-anchor" href="#_23、class-与-style-如何动态绑定" aria-hidden="true">#</a> 23、class 与 style 如何动态绑定?</h5><ul><li>动态 class<strong>对象</strong>：<code>&lt;div :class=&quot;{ &#39;is-active&#39;: true, &#39;red&#39;: isRed }&quot;&gt;&lt;/div&gt;</code></li><li>动态 class<strong>数组</strong>：<code>&lt;div :class=&quot;[&#39;is-active&#39;, isRed ? &#39;red&#39; : &#39;&#39; ]&quot;&gt;&lt;/div&gt;</code></li><li>动态 style<strong>对象</strong>：<code>&lt;div :style=&quot;{ color: textColor, fontSize: &#39;18px&#39; }&quot;&gt;&lt;/div&gt;</code></li><li>动态 style<strong>数组</strong>：<code>&lt;div :style=&quot;[{ color: textColor, fontSize: &#39;18px&#39; }, { fontWeight: &#39;300&#39; }]&quot;&gt;&lt;/div&gt;</code></li></ul><h5 id="_26、-sync-用法" tabindex="-1"><a class="header-anchor" href="#_26、-sync-用法" aria-hidden="true">#</a> 26、.sync 用法</h5><p>parent 👇</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dialog</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialogVisible<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>child 👇</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:visible</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>visible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
close() { this.$emit(&quot;update:visible&quot;, false); },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_27、过滤器-filter" tabindex="-1"><a class="header-anchor" href="#_27、过滤器-filter" aria-hidden="true">#</a> 27、过滤器（filter）</h5><p>https://cn.vuejs.org/v2/guide/filters.html</p><p>自定义过滤器，常用于一些常见的文本格式化</p><p>规则：<code>变量名 + “ | ” + 过滤器名</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 在双花括号中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ message | capitalize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 在 \`v-bind\` 中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawId | capitalize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">capitalize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_28、vue-的虚拟-dom-原理" tabindex="-1"><a class="header-anchor" href="#_28、vue-的虚拟-dom-原理" aria-hidden="true">#</a> 28、Vue 的虚拟 DOM 原理？</h5><h6 id="_28-1、什么是虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_28-1、什么是虚拟-dom" aria-hidden="true">#</a> 28-1、什么是虚拟 dom?</h6><p>虚拟 DOM 简单来说就是一个 js 对象构建的树，用对象的属性描述 dom 节点，通过一些操作最后渲染为真正的 DOM 节点</p><h6 id="_28-2、虚拟-dom-和真实-dom-怎么映射的" tabindex="-1"><a class="header-anchor" href="#_28-2、虚拟-dom-和真实-dom-怎么映射的" aria-hidden="true">#</a> 28-2、虚拟 DOM 和真实 DOM 怎么映射的?</h6><ul><li><p>js</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Virtual Dom</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Item1&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Item2&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Item3&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h6 id="_28-3、为什么要使用虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_28-3、为什么要使用虚拟-dom" aria-hidden="true">#</a> 28-3、为什么要使用虚拟 DOM</h6><ul><li>操作原生 DOM 慢，且消耗性能，js 运行效率高</li><li>Virtual DOM 的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。</li></ul><h5 id="_29、vue-diff-算法" tabindex="-1"><a class="header-anchor" href="#_29、vue-diff-算法" aria-hidden="true">#</a> 29、Vue Diff 算法</h5>`,31),z=n("p",null,"什么是 diff 算法",-1),I=n("p",null,"在页发生大量重绘及回流的时候用于计算 DOM 节点变化，最后只修改发生变化的 DOM 节点，而不用对整 DOM 进行更新",-1),S=n("li",null,[n("p",null,"回流：浏览器重新渲染部分或全部文档的过程"),n("p",null,"如页面重新渲染、修改元素大小位置等")],-1),T=n("code",null,"color",-1),P=n("code",null,"background-color",-1),N=n("code",null,"visibility",-1),F=n("li",null,[n("p",null,"详细： https://juejin.cn/post/6844903569087266823")],-1),R=n("li",null,[n("p",null,"原理"),n("blockquote",null,[n("p",null,"虚拟 DOM 会先生成一棵 virtual DOM，当 virtual DOM 某个节点发生改变的时候会生成新的 Vnode,然后新旧 Vnode 进行对比，发现有修改的地方再去修改真实 DOM")])],-1),L=p(`<h5 id="_30、element-自定义表单校验" tabindex="-1"><a class="header-anchor" href="#_30、element-自定义表单校验" aria-hidden="true">#</a> 30、element 自定义表单校验</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Boolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户评分阈值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;用户评分阈值不能大于100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&quot;blur&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_31、nexttick-用处" tabindex="-1"><a class="header-anchor" href="#_31、nexttick-用处" aria-hidden="true">#</a> 31、NextTick 用处</h5><ul><li><p>Vue 在更新 DOM 时是异步执行的 , 只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更</p></li><li><p>同一事件循环内<code>多次修改，</code>会统一<code>进行一次</code>视图更新(☝☝☝ 上句话的通俗解释)</p></li><li><p>使用场景：</p><p>数据更新，视图还未更新，我们需要拿到最新视图数据的时候使用</p><p><strong>demo</strong>：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testDiv<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

name: &#39;小林&#39; this.name = &#39;林三心&#39; console.log(this.$refs.testDiv.innerHTML) // 小林
this.$nextTick(() =&gt; { console.log(this.$refs.testDiv.innerHTML) // 林三心 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_32、生命周期" tabindex="-1"><a class="header-anchor" href="#_32、生命周期" aria-hidden="true">#</a> 32、生命周期</h5><p><img src="https://raw.githubusercontent.com/tengyuanOasis/image/master/image-20211213161041290.png" alt="image-20211213161041290"></p><h5 id="_33、vue-能否在-data-里面直接使用-props-传过来的值-为什么" tabindex="-1"><a class="header-anchor" href="#_33、vue-能否在-data-里面直接使用-props-传过来的值-为什么" aria-hidden="true">#</a> 33、Vue 能否在==data==里面直接使用 props 传过来的值，为什么？</h5>`,7),H=n("p",null,[a("可以直接使用，因为在 Vue 源码中使用"),n("code",null,"initState( )"),a("函数初始化 Vue 组件实例状态，其中初始化顺序依次为：")],-1),J=p(`<div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>export function initState(vm) {
  // 获取传入的数据对象
  const opts = vm.$options;

  if (opts.props) {
    initProps(vm);
  }

  if (opts.methods) {
    initMethod(vm);
  }

  if (opts.data) {
    // 初始化data
    initData(vm);
  }

  if (opts.computed) {
    initComputed(vm);
  }

  if (opts.watch) {
    initWatch(vm);
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_34、为什么-vue-的-data-是个函数并且返回一个对象呢" tabindex="-1"><a class="header-anchor" href="#_34、为什么-vue-的-data-是个函数并且返回一个对象呢" aria-hidden="true">#</a> 34、为什么 Vue 的==data==是个函数并且返回一个对象呢？</h5><blockquote><p>当 data 是个函数的时候，组件每次调用 data 中的数据，data 执行都会返回一个新的对象，防止多处调用造成数据污染</p><p>vue 组件为了保证每个实例上的 data 数据的独立性，规定了必须使用函数，而不是对象。 因为使用对象的话，每个实例（组件）上使</p><p>用的 data 数据是相互影响的，这当然就不是我们想要的了。 对象是对于内存地址的引用，直接定义个对象的话组件之间都会使用这</p><p>个对象，这样会造成组件之间数据相互影响。</p></blockquote><h5 id="_35、vue-中为什么可以直接使用this-name-测试-直接访问或修改-data-中的数据" tabindex="-1"><a class="header-anchor" href="#_35、vue-中为什么可以直接使用this-name-测试-直接访问或修改-data-中的数据" aria-hidden="true">#</a> 35、Vue 中为什么可以直接使用<code>this.name=&#39;测试&#39;</code>直接访问或修改==data==中的数据</h5><blockquote><p>Vue 实例中初始化<code>data</code>数据的时候，使用 Object.defineProperty 对数据做了一层代理，==将数据都挂载在 Vue 实例上==，最后结果形成如 <code>this.name</code> ==&gt; <code>this._data .name</code>，我们可以使用 this.a 来访问 this._data.a</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数据代理</span>
<span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> sourceKey<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> object<span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			object<span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://juejin.cn/post/7023197006998978597#heading-73</p><p>https://juejin.cn/post/6984210440276410399#heading-55</p><h5 id="_36、vue-elememt-table-表单校验" tabindex="-1"><a class="header-anchor" href="#_36、vue-elememt-table-表单校验" aria-hidden="true">#</a> 36、Vue+elememt table 表单校验</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>work_plan_form<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataInfo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataInfo.workPlan<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
          
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>序号<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>班次<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ row, $index }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`workPlan.\${$index}.name\`<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules.name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>

          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>服务时间<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceTime<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ row, $index }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>
                <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`workPlan.\${$index}.serviceTime\`<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules.serviceTime<span class="token punctuation">&quot;</span></span>
              <span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-time-picker</span>
                  <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(val) =&gt; serviceTimeChange(val, row)<span class="token punctuation">&quot;</span></span>
                  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 400px</span><span class="token punctuation">&quot;</span></span></span>
                  <span class="token attr-name">value-format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HH:mm<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">is-range</span>
                  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row.serviceTime<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>至<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>开始时间<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>结束时间<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>选择时间范围<span class="token punctuation">&quot;</span></span>
                <span class="token punctuation">/&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>

          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>顾问<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>adviser<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ row, $index }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`workPlan.\${$index}.adviser\`<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules.adviser<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row.adviser<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>
                    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in []<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.dictValue<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.dictLabel<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.dictValue<span class="token punctuation">&quot;</span></span>
                  <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
          
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_37、keep-alive-原理" tabindex="-1"><a class="header-anchor" href="#_37、keep-alive-原理" aria-hidden="true">#</a> 37、keep-alive 原理</h5><blockquote><p>https://juejin.cn/post/6844903837770203144</p></blockquote><p>为什么 vue 先初始化 mixin</p><p>methods 为什么比 data 更早初始化</p><p>为什么 vue 中可以直接用 this 调用 methods</p><p>通过 bind 改变 function 的 this 指向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//源码：</span>
vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> noop <span class="token operator">:</span> <span class="token function">bind</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function K(W,Q){const o=l("ExternalLinkIcon"),t=l("font");return u(),i("div",null,[r(" @format "),k,n("blockquote",null,[v,n("p",null,[m,a("：Vue.js 只提供了 vue-cli 生态中最核心的"),g,a("，不需要一次搞明白整个 Vue 生态， "),n("a",b,[s(o)])])]),x,n("blockquote",null,[h,n("p",null,[n("a",q,[a("<<MVC 与三层架构>>"),s(o)])]),n("p",null,[n("a",f,[a("<<MVC，MVP 和 MVVM 的图示>>"),s(o)])])]),_,n("blockquote",null,[y,n("ul",null,[j,n("li",null,[n("a",w,[a("provide-inject 传递"),s(o)])])])]),V,n("ul",null,[M,n("li",null,[O,n("p",null,[a("1、v-if 为 false 的时候会直接"),s(t,{color:"red"},{default:e(()=>[a(" 销毁  ")]),_:1}),a("当前元素;")]),D]),E]),$,n("h5",A,[B,a(" 18、对象"),s(t,{color:"red"},{default:e(()=>[a("新")]),_:1}),a("属性无法更新视图，删除属性无法更新视图，为什么？怎么办？")]),C,n("ul",null,[n("li",null,[z,n("blockquote",null,[I,n("ol",null,[S,n("li",null,[n("p",null,[a("重绘：当页面中元素"),s(t,{color:"red"},{default:e(()=>[a("样式")]),_:1}),a("的改变并不影响它在文档流中的位置时（例如："),T,a("、"),P,a("、"),N,a("等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。")])]),F])])]),R]),L,n("blockquote",null,[H,s(t,{color:"blue"}),s(t,{color:"blue"},{default:e(()=>[a("props")]),_:1}),a(" —> "),s(t,{color:"red"},{default:e(()=>[a("methods ")]),_:1}),a(" —>"),s(t,{color:"blue"},{default:e(()=>[a(" data")]),_:1}),a(" —> "),s(t,{color:"red"},{default:e(()=>[a("computed")]),_:1}),a("—>"),s(t,{color:"blue"},{default:e(()=>[a(" watch")]),_:1})]),J])}const Y=c(d,[["render",K],["__file","1、Vuejichu.html.vue"]]);export{Y as default};
