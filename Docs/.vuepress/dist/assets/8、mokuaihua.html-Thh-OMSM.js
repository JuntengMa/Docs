import{_ as p,r as o,o as c,c as i,b as n,d as a,f as e,e as t}from"./app-1sZ14lpL.js";const l={},u=t(`<p>现代JavaScript开发毋庸置疑会遇到代码量大和广泛使用第三方库的问题。解决这个问题的方案通常需要把代码拆分成很多部分，然后再通过某种方式将它们连接起来。</p><h4 id="_1、什么是模块化" tabindex="-1"><a class="header-anchor" href="#_1、什么是模块化" aria-hidden="true">#</a> 1、什么是模块化</h4><ul><li>将一个复杂的js程序进行逻辑拆分，封装为几个模块，并进行组合</li><li>块的内部数据为私有的，只是向外部暴露一些接口或方法与其他模块通信</li></ul><h4 id="_2-模块化的好处" tabindex="-1"><a class="header-anchor" href="#_2-模块化的好处" aria-hidden="true">#</a> 2. 模块化的好处</h4><ul><li>避免命名冲突(减少命名空间污染)</li><li>更好的分离, 按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h4 id="_3-模块化规范" tabindex="-1"><a class="header-anchor" href="#_3-模块化规范" aria-hidden="true">#</a> 3.模块化规范</h4><blockquote><ul><li><p>commonJs</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> largeNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;large-number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
largeNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;999&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>AMD</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;large-number&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">large<span class="token operator">-</span>number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
	largeNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;999&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ES Module</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> largeNumber <span class="token keyword">from</span> <span class="token string">&#39;large-number&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
largeNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;999&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h4 id="_4-commonjs-cjs" tabindex="-1"><a class="header-anchor" href="#_4-commonjs-cjs" aria-hidden="true">#</a> 4.CommonJS （CJS）</h4><blockquote><p>Nodejs 应用由Commonjs模块规范 ， 每个文件都是一个模块，都有自己的作用域</p><p>在一个文件中定义的函数、变量、类都是私有的，对其他文件不可见</p><p><strong>在服务器端，模块的加载是运行时同步加载的；</strong></p><p><strong>在浏览器端，模块需要提前编译打包处理。</strong></p></blockquote><h5 id="_4-1、特点" tabindex="-1"><a class="header-anchor" href="#_4-1、特点" aria-hidden="true">#</a> 4.1、特点</h5><blockquote><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ul></blockquote><h5 id="_4-2、语法" tabindex="-1"><a class="header-anchor" href="#_4-2、语法" aria-hidden="true">#</a> 4.2、语法</h5><blockquote><ul><li><p>暴露模块：<code>module.exports = value</code>或<code>exports.xxx = value</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span>v2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>returb v1<span class="token operator">+</span>v2<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>引入模块：<code>require(xxx)</code>,如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> largeNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;large-number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  largeNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;999&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>require()</p><p>require命令用于加载模块文件。<strong>require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错</strong>。</p></li></ul></blockquote><h5 id="_4-3、模块加载机制" tabindex="-1"><a class="header-anchor" href="#_4-3、模块加载机制" aria-hidden="true">#</a> 4.3、模块加载机制</h5><blockquote><ul><li>CommonJS模块的加载机制是，<strong>输入的是被输出的值的拷贝</strong>。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</li><li>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</li><li>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。</li></ul></blockquote><h4 id="_5、amd" tabindex="-1"><a class="header-anchor" href="#_5、amd" aria-hidden="true">#</a> 5、AMD</h4>`,16),r={href:"https://raw.githubusercontent.com/requirejs/requirejs",target:"_blank",rel:"noopener noreferrer"},d=t(`<blockquote><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p><p>AMD规范则是<strong>非同步加载模块</strong>（异步），允许指定回调函数</p><p>AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p></blockquote><p>5.1、语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//定义没有依赖的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> 模块
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//定义有依赖的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> 模块
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//引入使用模块:</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   使用m1<span class="token operator">/</span>m2
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、es-module" tabindex="-1"><a class="header-anchor" href="#_6、es-module" aria-hidden="true">#</a> 6、ES MODULE</h4><p>es6模块化，不详谈</p>`,5),k={href:"https://www.zhihu.com/question/20351507/answer/14859415",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[a("requirejs"),e(s)])]),d,n("p",null,[n("a",k,[a("AMD、CMD区别"),e(s)])])])}const g=p(l,[["render",m],["__file","8、mokuaihua.html.vue"]]);export{g as default};
