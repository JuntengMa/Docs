import{_ as l,r as o,o as c,c as i,a as u,b as n,d as s,f as a,w as r,e as t}from"./app-iph3vjA0.js";const d={},k=n("p",null,"JavaScript 基础",-1),v=n("p",null,"[TOC]",-1),m=n("h4",{id:"_01、-js-数据类型-7-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01、-js-数据类型-7-1","aria-hidden":"true"},"#"),s(" 01、 JS 数据类型(7+1)")],-1),b=n("p",null,[n("strong",null,"基本数据类型:")],-1),g=t("<ol><li><p><strong>Undefined</strong>：</p><ul><li>Undefined 类型表示未定义，任何变量在赋值前是 Undefined 类型、值为 undefined。</li></ul></li><li><p><strong>Null</strong></p><ul><li>空对象指针，故 typeof null 会返回 object，Null 表示的是：“==定义了但是为空==”，所以，在实际编程时，一般把变量赋值为 null。</li></ul></li><li><p><strong>Boolean</strong></p><ul><li>true / false。</li></ul></li><li><p><strong>Number</strong></p></li></ol><ul><li>浮点数(demo： 数值必须有小数的数，1.1；0.1 等)</li><li>数值范围[Number.MIN_VALUE,Number.MAX_VALUE]</li><li>NAN(not a number)</li><li>Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数。</li><li>浮点数的定义，非整数的 Number 类型无法用 <code>==</code>（ <code>=== </code>也不行） 来比较。 即 ( 0.1+0.2 ==0.3 ==&gt;false)</li></ul>",2),f={start:"5"},h=t(`<li><p><strong>String</strong>:</p><ul><li>String 用于表示文本数据。String 有最大长度是 2^53 - 1，因为 String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。</li></ul></li><li><p><strong>Symbol</strong>:</p><ul><li><p>Symbol（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是<strong>唯一、不可变的</strong>。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p></li><li><p>使用：</p></li><li><p>https://juejin.cn/post/6844903812046520328</p></li><li><p>https://cloud.tencent.com/developer/article/1191039</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//符号需要使用Symbol()函数初始化。因为符号本身是原始类型，所以typeof操作符对符号返回symbol。</span>
<span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol</span>

<span class="token comment">//调用Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：</span>
<span class="token keyword">let</span> genericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> otherGenericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> otherFooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>genericSymbol <span class="token operator">==</span> otherGenericSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooSymbol <span class="token operator">==</span> otherFooSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,2),_=n("p",null,[n("strong",null,"bigInt")],-1),j=n("strong",null,[n("code",null,"BigInt")],-1),y=n("code",null,"2^53 - 1",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"Number",-1),x=n("strong",null,[n("code",null,"BigInt")],-1),q=n("li",null,[n("strong",null,[n("code",null,"BigInt")]),s(" 可以表示任意大的整数")],-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"Math",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Number",-1),M=n("li",null,[s("可以直接在常规 Number 后面增加一个字符 "),n("code",null,"n"),s(" 表示一个 BigInt。")],-1),J=t(`<li><p><strong>引用数据类型:</strong></p><p>引用数据类型指的是 Object 类型,其他如 Array,Date 等数据类型都可以理解为 Object 的子类</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object <span class="token operator">=</span>  <span class="token punctuation">[</span>
   Array<span class="token punctuation">,</span>
   Date<span class="token punctuation">,</span>
   Math<span class="token punctuation">,</span>
   <span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>基本数据类型和引用数据类型区别:</strong></p><ul><li>基本数据类型在内存中占固定大小的空间 , 因此被保存在栈中</li><li>引用类型值是对象，保存在 <strong>堆内存</strong> 中。包含引用类型值的变量实际包含并非对象本身，而是指向该对象的指针。一个变量从另一个变量复制引用类型的值时，复制的也是指向该对象的指针。</li></ul></li>`,2),B=n("p",null,[n("strong",null,"数据类型检测方法")],-1),R=n("li",null,[n("p",null,"typeof: 直接返回数据类型字段，但是无法判断数组、null、对象(均返回 object)")],-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"实例",-1),A=n("strong",null,"构造函数",-1),I={href:"https://juejin.cn/post/6844903613584654344",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=n("p",null,[n("code",null,"Object.prototype.toString.call()"),s(":")],-1),L={href:"https://zhuanlan.zhihu.com/p/118793721",target:"_blank",rel:"noopener noreferrer"},W=t("<table><thead><tr><th></th><th>typeof</th><th>instanceof</th><th>Object.prototype.toString.call()</th></tr></thead><tbody><tr><td>var test = &#39;kangkang&#39;;</td><td><code>string</code></td><td>test instanceof String <code>//false</code></td><td><code>[object String]</code></td></tr><tr><td>var test = 123;</td><td><code>number</code></td><td>test instanceof Number<code>//false</code></td><td><code>[object Number]</code></td></tr><tr><td>var test = true;</td><td><code>boolean</code></td><td>test instanceof Boolean<code>//false</code></td><td><code>[object Boolean]</code></td></tr><tr><td>var test = undefined;</td><td><code>undefined</code></td><td>test instanceof Object <code>//false</code></td><td><code>[object Undefined]</code></td></tr><tr><td>var test = null;</td><td><code>object</code></td><td>test instanceof Object<code>//false</code></td><td><code>[object Null]</code></td></tr><tr><td>var test = {};</td><td><code>object</code></td><td>test instanceof Object<code>//true</code></td><td><code>[object Object]</code></td></tr><tr><td>var test(){ };</td><td><code>function</code></td><td>test instanceof Object<code>//true</code></td><td><code>[object Function]</code></td></tr></tbody></table>",1),F=t(`<h4 id="_02-、什么是堆-栈" tabindex="-1"><a class="header-anchor" href="#_02-、什么是堆-栈" aria-hidden="true">#</a> 02 、什么是堆/栈?</h4><blockquote><p>堆栈概念存在于数据结构和操作系统内存中</p><p>👉 栈</p><ul><li>栈内存的简称，系统自动分配相对<strong>固定大小</strong>的内存空间，并由系统<strong>自动释放</strong>。</li><li>栈内存特点，数据一执行完毕，变量会立即释放，节约内存空间。</li><li>栈中的数据存取方式为线性结构，<strong>后进先出</strong>，便于管理。</li><li>栈区内存保存变量标识符</li><li><strong>对于栈,只允许在尾部删除</strong>,即后进先出</li></ul><p>👉 堆</p><ul><li>堆内存的简称，<strong>动态分配内存</strong>，内存大小不一，<strong>不是自动释放</strong>。</li><li>队列优先 , <strong>先进先出</strong>，方便存储和开辟内存空间。</li><li>堆内存存储对象的地址</li><li><strong>对于队列,只允许在头部删除,后端插入</strong>即先进先出</li></ul></blockquote><h4 id="_03-、-什么是-javasctipt-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_03-、-什么是-javasctipt-垃圾回收机制" aria-hidden="true">#</a> 03 、 什么是 JavaSctipt 垃圾回收机制?</h4><ul><li><p><strong>为什么要垃圾回收?</strong></p><blockquote><p>随着前端业务需求的不断增多 js 会占用越来越多的内存。 但是内存并不是无限的，故<strong>需要垃圾回收机制去处理那些我们不再需要的变量、对象</strong></p></blockquote></li><li><p><strong>垃圾回收机制的特点:</strong></p><p>垃圾回收机制会==定期==对那些我们不再使用的变量、对象所占用的内存释放</p><blockquote><p>原理:</p><ul><li>找出那些不再使用的变量，然后释放其占用的内存。</li><li>垃圾收集器会按照固定的时间间隔(或预定的收集时间)周期性地执行此操作。</li></ul></blockquote></li><li><p><strong>垃圾回收的方式有哪些?</strong></p><ul><li><p><strong>标记清除</strong></p><ul><li><p>当变量进入环境时,就将其标记为&quot;进入环境&quot;,此时&quot;进入环境&quot;的变量是不可以被回收的&quot;</p></li><li><p>当变量离开环境时,就将其标记为&quot;离开环境&quot;,此时&quot;离开环境&quot;的变量可以被回收</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token comment">// 函数执行时，a b 分别被标记 进入环境</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数执行结束，a b 被标记 离开环境，被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>引用计数</strong></p><ul><li><p>统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 引用类型变量 c的引用计数为 0</span>
	<span class="token keyword">let</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// c 被 d 引用 c的引用计数为 1</span>
	<span class="token keyword">let</span> e <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// c 被 e 引用 c的引用计数为 2</span>
	d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// d 不再引用c c的引用计数减为 1</span>
	e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// e 不再引用 c c的引用计数减为 0 将被回收</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但是引用计数的方式，有一个相对明显的缺点——<strong>循环引用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	f<span class="token punctuation">.</span>prop <span class="token operator">=</span> g<span class="token punctuation">;</span>
	g<span class="token punctuation">.</span>prop <span class="token operator">=</span> f<span class="token punctuation">;</span>
	<span class="token comment">// 由于 f 和 g 互相引用，计数永远不可能为 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>像上面这种情况就需要<strong>手动将变量的内存释放</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>f.prop = null
g.prop = null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul>`,4),U={href:"https://juejin.im/post/6844903652331618312",target:"_blank",rel:"noopener noreferrer"},V={href:"https://juejin.im/post/6844903858972409869#heading-3",target:"_blank",rel:"noopener noreferrer"},H=t(`<h4 id="_04-、-什么是循环引用" tabindex="-1"><a class="header-anchor" href="#_04-、-什么是循环引用" aria-hidden="true">#</a> 04 、 什么是循环引用 ?</h4><p>当对象 1 中的某个属性指向对象 2，对象 2 中的某个属性指向对象 1 就会出现循环引用(最简单的例子)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">circularReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
	obj2<span class="token punctuation">.</span>b <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_05-、-内存泄露" tabindex="-1"><a class="header-anchor" href="#_05-、-内存泄露" aria-hidden="true">#</a> 05 、 内存泄露</h4><ul><li><p>什么是内存泄露?</p><blockquote><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。 对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。 否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。 不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。</p></blockquote></li><li><p>常见的内存泄露有哪些?</p><blockquote><ul><li><p>全局变量(在非严格模式下当引用未声明的变量时，会在全局对象中创建一个新变量。)</p></li><li><p>被遗忘的定时器和回调函数</p></li><li><p>DOM 引用</p></li><li><p>闭包</p></li></ul></blockquote></li></ul><h4 id="_06-、-javascript-可执行上下文" tabindex="-1"><a class="header-anchor" href="#_06-、-javascript-可执行上下文" aria-hidden="true">#</a> 06 、 JavaScript 可执行上下文</h4><blockquote><p>js 指向变量或函数时，会生成一个与该变量或函数相关的执行环境，这个执行环境就是可执行上下文</p><p>可执行上下文规定了该变量或者函数可访问的变量及他们的行为</p></blockquote><h4 id="_07-、-javascript-在浏览器中如何执行的" tabindex="-1"><a class="header-anchor" href="#_07-、-javascript-在浏览器中如何执行的" aria-hidden="true">#</a> 07 、 JavaScript 在浏览器中如何执行的</h4><h4 id="_08-、-从输入-url-到页面加载过程" tabindex="-1"><a class="header-anchor" href="#_08-、-从输入-url-到页面加载过程" aria-hidden="true">#</a> 08 、 从输入 url 到页面加载过程</h4><h4 id="_09-、-内部属性-class-是什么" tabindex="-1"><a class="header-anchor" href="#_09-、-内部属性-class-是什么" aria-hidden="true">#</a> 09 、 内部属性[[class]]是什么</h4><p>所有<code>typeof</code>返回值为 <code>object</code> 的对象（如数组）都包含一个内部属性 [[Class]],这个属性无法直接访问，一般通过以下代码查看</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;[object Function]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_10-、-js-内置对象都有哪些" tabindex="-1"><a class="header-anchor" href="#_10-、-js-内置对象都有哪些" aria-hidden="true">#</a> 10 、 Js 内置对象都有哪些</h4><blockquote><p>js 内置对象主要是只在程序执行前存在全局作用域里面的由 js 定义的一些全局属性,函数和用来实例化其他对象的构造函数对象.</p><p>一般我们经常用到的</p><ul><li><p>全局函数变量值: NaN , undefined ,</p></li><li><p>全局函数: parseInt() , paeseFloat()</p></li><li><p>用来实例化的全局构造函数: Date , Object 等</p></li></ul></blockquote><h4 id="_11-、原型原型链" tabindex="-1"><a class="header-anchor" href="#_11-、原型原型链" aria-hidden="true">#</a> 11 、原型原型链</h4><blockquote><p>01/ 原型:</p><ul><li>Js 中我们使用构造函数来新建对象的</li><li>每个构造函数内部都有一个 prototype 属性,这个属性值是一个对象,包含了可以由该构造函数共享的实例和方法</li><li>我们使用构造函数实例化一个对象后,这个对象内部有一个<code>__proto__</code>指针,可以指向构造函数 prototype 属性对应的值,es5 中我们一般称他为对象的原型 浏览器可以通过<code>__proto__</code>值来获取,也可以用 Object.getPrototypeOf()找到对象的原型</li></ul><p>02/ 原型链:</p><ul><li>当我们访问一个对象的属性时,如果这个对象里面不存在该属性的时候,那么就会到这个对象的原型对象中找这个属性,就这样一层层的找就构成了原型链,最后找到 Object.proptotype,如果还没找到就会返回 null.</li></ul><p>03/ 获取原型的办法:</p><ul><li><code>p.__proto__</code></li><li><code>p.constructor.prototype</code></li><li><code>Object.getPrototypeOf(p)</code></li></ul><p>04/ 原型可以做什么?</p><ul><li>实现继承</li><li>共享我们的一些实例和方法</li></ul></blockquote><h4 id="_12-、闭包" tabindex="-1"><a class="header-anchor" href="#_12-、闭包" aria-hidden="true">#</a> 12 、闭包</h4><blockquote><p>闭包本质就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，等到下级作用域执行完以后才正常得到释放</p></blockquote><h4 id="_13、继承" tabindex="-1"><a class="header-anchor" href="#_13、继承" aria-hidden="true">#</a> 13、继承</h4>`,19),G={href:"https://raw.githubusercontent.com/mqyqingfeng/Blog/issues/16",target:"_blank",rel:"noopener noreferrer"},X=n("h4",{id:"_14-、什么是-pure-function",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-、什么是-pure-function","aria-hidden":"true"},"#"),s(" 14 、什么是 pure function")],-1),K=n("p",null,"如果一个函数没有任何副作用（side-effects)，不会影响任何外部状态，对于任何一个相同的输入（参数），无论何时调用这个函数总是返回同样的结果，这个函数就是一个 pure function。",-1),Q={id:"_15、-重绘回流-todo-重写",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#_15、-重绘回流-todo-重写","aria-hidden":"true"},"#",-1),Z=t(`<p><strong>01/ 前置知识:</strong></p><ol><li><p>浏览器使用流式布局模型 (Flow Based Layout)。</p></li><li><p>浏览器会把<code>HTML</code>解析成<code>DOM</code>，把<code>CSS</code>解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了<code>Render Tree</code>。</p></li><li><p>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</p></li><li><p>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花 3 倍于同等元素的时间，这也是为什么要避免使用<code>table</code>布局的原因之一。</p></li></ol><p><strong>02/ 什么是回流:</strong></p><p>当<code>Render Tree</code>中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p><strong>02.1/ 会导致回流的操作：</strong></p><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除<strong>可见</strong>的<code>DOM</code>元素</li><li>激活<code>CSS</code>伪类（例如：<code>:hover</code>）</li><li>查询某些属性或调用某些方法</li></ul><p><strong>02.2/ 一些常用且会导致回流的属性和方法：</strong></p><ul><li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li><li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li><li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li><li><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li><li><code>scrollTo()</code></li></ul><p><strong>03/ 什么是重绘:</strong></p><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><ul><li><strong>回流比重绘的代价要更高。</strong></li><li>有时即使仅仅回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。</li></ul><p><strong>03.1/ 现代浏览器会对频繁的回流或重绘操作进行优化：</strong></p><ul><li><p>浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。</p></li><li><p>当你访问以下属性或方法时，浏览器会立刻清空队列：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>clientWidth、clientHeight、clientTop、clientLeft


- offsetWidth、offsetHeight、offsetTop、offsetLeft


- scrollWidth、scrollHeight、scrollTop、scrollLeft


- width、height


- getComputedStyle()


- getBoundingClientRect()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>04/ 如何避免回流重绘?</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- CSS

- 避免使用\`table\`布局。
- 尽可能在\`DOM\`树的最末端改变\`class\`。
- 避免设置多层内联样式。
- 将动画效果应用到\`position\`属性为\`absolute\`或\`fixed\`的元素上。
- 避免使用\`CSS\`表达式（例如：\`calc()\`）。

- JavaScript

- 避免频繁操作样式，最好一次性重写\`style\`属性，或者将样式列表定义为\`class\`并一次性更改\`class\`属性。
- 避免频繁操作\`DOM\`，创建一个\`documentFragment\`，在它上面应用所有\`DOM操作\`，最后再把它添加到文档中。
- 也可以先为元素设置\`display: none\`，操作结束后再把它显示出来。因为在\`display\`属性为\`none\`的元素上进行的\`DOM\`操作不会引发回流和重绘。
- 避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。
- 对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。

**05 /总结:**

**回流必将引起重绘，重绘不一定会引起回流。**

参考:[&lt;&lt;浏览器的回流与重绘 (Reflow &amp; Repaint)&gt;&gt;](https://juejin.im/post/6844903569087266823)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16-、-ssr-bsr-区别" tabindex="-1"><a class="header-anchor" href="#_16-、-ssr-bsr-区别" aria-hidden="true">#</a> 16 、 SSR/BSR 区别</h4><ul><li><p>SSR:服务端渲染，对营销推广的要求比较高的产品,比如官网等</p></li><li><p>BSR:客户端渲染 ， 对营销推广要求没有那么搞的产品,例如后台管理系统</p><ul><li>M+v 过程发生在浏览器,浏览器压力较大</li><li>页面访问和加载速度没有服务端渲染快</li><li>不利于 SEO 优化</li><li>前后端分离,便于代码调试和维护</li><li>可以做更加复杂的产品</li></ul></li></ul><h4 id="_17、var-、let-、const" tabindex="-1"><a class="header-anchor" href="#_17、var-、let-、const" aria-hidden="true">#</a> 17、var 、let 、const</h4><p>三者都用于变量声明方式</p><ul><li><p>var</p><ul><li><p>var 操作符定义的变量会成为包含它的函数的局部变量。</p></li><li><p>使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的<strong>变量会自动提升</strong>到函数作用域顶部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token operator">/</span>之所以不会报错，是因为ECMAScript运行时把它看成等价于如下代码：
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> age<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>let 声明</p><ul><li><p><strong>let 声明的范围是块作用域，而 var 声明的范围是函数作用域</strong>。</p></li><li><p>let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。(暂时性死区)</p></li><li><p>块级作用域是什么？</p><ul><li>块级作用域就是包含在函数括号内{...}的作用域。在这个作用域中，拥有着和函数作用域相同的行为。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// name会被提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// age不会被提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError：age没有定义</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>const 声明</p><ul><li>const 声明常量，且不可修改</li></ul></li></ul><h4 id="_19、null-和-undefined-的异同点" tabindex="-1"><a class="header-anchor" href="#_19、null-和-undefined-的异同点" aria-hidden="true">#</a> 19、Null 和 Undefined 的异同点</h4><blockquote><p>相同点:</p><ul><li>都是 js 基本数据类型，两个基本数据类型都只有一个值，null、和 undefined</li></ul><p>区别：</p><ul><li>undefined 代表未定义，一般声明了但是未赋值(定义)的时候会返回 undefined；</li><li>null 主要作为一个初始值赋值给变量，作为初始化；</li><li><code>typeof undefined </code> //undefined</li><li><code>typeof null</code> //object</li></ul></blockquote><h4 id="_20、isnan-与-number-isnan-的区别" tabindex="-1"><a class="header-anchor" href="#_20、isnan-与-number-isnan-的区别" aria-hidden="true">#</a> 20、isNaN 与 Number.isNaN 的区别</h4>`,23),$={href:"https://nicholaslee119.github.io/2017/10/30/windowIsNan%E5%92%8CnumberIsNan%E7%9A%84%E5%8C%BA%E5%88%AB/",target:"_blank",rel:"noopener noreferrer"},nn=n("ol",null,[n("li",null,"isNaN ==> is not a numner , 在判断非 number 类型，如 String、Object 等也会返回 true"),n("li",null,"Number.isNaN ===> 只判断是否是 NaN")],-1),sn=n("p",null,[n("img",{src:"https://raw.githubusercontent.com/tengyuanOasis/image/master/image/image-20220614175237830.png",alt:"image-20220614175237830"})],-1),an={href:"https://segmentfault.com/a/1190000038344251",target:"_blank",rel:"noopener noreferrer"},en=t(`<blockquote><h5 id="js-执行代码分两个阶段" tabindex="-1"><a class="header-anchor" href="#js-执行代码分两个阶段" aria-hidden="true">#</a> js 执行代码分两个阶段</h5><ol><li>语法词法分析阶段（预编译阶段）</li><li>执行阶段</li></ol><h5 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h5><ol><li>只有<strong>声明</strong>被提升，<strong>初始化</strong>不会被提升（赋值不会提升）</li><li>声明会被提升到当前作用域的顶端</li></ol><h5 id="函数提升" tabindex="-1"><a class="header-anchor" href="#函数提升" aria-hidden="true">#</a> 函数提升</h5><ol><li><p>函数声明和初始化都会被提升</p><p>例子 1：函数声明可被提升</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>
<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预编译后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> square <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数表达式不会被提升</p><p>例子 2：函数表达式不可被提升</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// square is not a function =》 初始化并未提升，此时 square 值为 undefined</span>
<span class="token keyword">var</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预编译后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> square<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined =》赋值没有被提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// square is not a function =》 square 值为 undefined 故报错</span>
<span class="token function-variable function">square</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></blockquote><h4 id="_21、js-中箭头函数-声明式函数、普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_21、js-中箭头函数-声明式函数、普通函数的区别" aria-hidden="true">#</a> 21、Js 中箭头函数，声明式函数、普通函数的区别</h4><blockquote><p>箭头函数：const test = ()=&gt;{}</p><p>声明式函数： const test = function(){}</p><p>普通函数：function test（）{}</p></blockquote><p>箭头函数：</p><blockquote><ul><li>箭头函数无 arguments 对象</li><li>箭头函数内部的 this 与其自身的调用无关系，与它上层（声明位置）this 指向相同。</li><li>箭头函数无 prototype 属性，无法作为构造函数</li></ul></blockquote><p>声明式函数：</p><blockquote><ul><li>函数表达式不可被提升</li></ul></blockquote><h4 id="_22、promise-all、promise-allsettled-的区别" tabindex="-1"><a class="header-anchor" href="#_22、promise-all、promise-allsettled-的区别" aria-hidden="true">#</a> 22、Promise.all、Promise.allSettled 的区别</h4><ul><li>两者主要是在遇到什么情况就返回上的区别。</li><li>Promise.all 在全部给定 promise 全部 resolve 或者某个 reject 的时候就会返回结果。</li><li>Promsie.allSettled 在所有给定的 promise 都已经 fullfilled 或 rejeced 后的 promise，并带有一个数组，每个对象对应 promise 的结果。</li></ul><p>看示例：</p><ul><li><strong>Promise.all 给定 promise 全部 resolve</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// p是一个promise对象，状态是fulfilled</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71397eaede52420caba7d54639644d6a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><ul><li><strong>Promise.all 给定的 promise 其中一个 reject</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此时会报错，因为没有对异常进行处理</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fee077f32526432da070e4153d6bc1f9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><p><strong>Promise.allSettled 给定 promise 全部 resolve</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// p3是一个promise对象，状态是fulfilled</span>
<span class="token keyword">const</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f94dcb63d04d4fdfa57d153f25a0ae0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><p><strong>Promise.allSettled 给定的 promise 其中一个 reject</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// p4是一个promise对象，状态是fulfilled</span>
<span class="token keyword">const</span> p4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb060f02cba94382b4cbbb6c8a3a1707~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><ul><li><strong>promise.all 中第 2 个 promise，reject，第 3 个 promise 还会执行么?</strong></li></ul><p>会执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;promise2 error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69ea606052d446dda71dc69a992c0be8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p>`,26);function tn(on,pn){const e=o("ExternalLinkIcon"),p=o("font");return c(),i("div",null,[u(" @format "),k,v,m,n("ul",null,[n("li",null,[b,n("blockquote",null,[g,n("ol",f,[h,n("li",null,[_,n("ul",null,[n("li",null,[j,s(" 是一种内置对象，它提供了一种方法来表示大于 "),y,s(" 的整数。这原本是 Javascript 中可以用 "),n("a",S,[w,a(e)]),s(" 表示的最大数字。"),x,s(" 可以表示任意大的整数。")]),q,n("li",null,[s("不能用于 "),n("a",N,[O,a(e)]),s(" 对象中的方法；")]),n("li",null,[s("不能和任何 "),n("a",C,[P,a(e)]),s(" 实例混合运算，两者必须转换成同一种类型。")]),M])])])])]),J,n("li",null,[B,n("ul",null,[R,n("li",null,[n("p",null,[n("a",T,[s("instanceof"),a(e)]),s(": 检查 "),z,s("的原型链中是否包含指定"),A,s("的原型：")]),n("p",null,[n("a",I,[s("解析"),a(e)])]),E]),n("li",null,[D,n("p",null,[n("a",L,[s("解析"),a(e)])])])]),W])]),F,n("p",null,[s("参考: "),n("a",U,[s("<<javascript 垃圾回收机制>>"),a(e)]),n("a",V,[s("<<JavaScript 垃圾回收机制>>"),a(e)])]),H,n("p",null,[n("a",G,[s("<<JavaScript 深入之继承的多种方式和优缺点>>"),a(e)])]),X,K,n("h4",Q,[Y,s(" 15、 重绘回流 （TODO："),a(p,{color:"red"},{default:r(()=>[s("重写")]),_:1}),s("）")]),Z,n("p",null,[n("a",$,[s("详细文档"),a(e)])]),nn,sn,n("p",null,[s("21、"),n("a",an,[s("Js 中变量提升及函数提升"),a(e)])]),en])}const cn=l(d,[["render",tn],["__file","1、JavaScriptjichu.html.vue"]]);export{cn as default};
